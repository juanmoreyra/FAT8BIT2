
FAT8BIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009cc  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009864  08009864  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009864  08009864  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009864  08009864  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800986c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002054  2000008c  080098f8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e0  080098f8  000220e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c059  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa4  00000000  00000000  0003c10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000400b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00041948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052fe  00000000  00000000  00043050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c845  00000000  00000000  0004834e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979da  00000000  00000000  00064b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e4  00000000  00000000  000fc5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e80 	.word	0x08008e80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08008e80 	.word	0x08008e80

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f001 f920 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f848 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9a2 	bl	80004a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000160:	f000 f880 	bl	8000264 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000164:	f000 f8b4 	bl	80002d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f972 	bl	8000450 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800016c:	f003 fb5c 	bl	8003828 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000170:	f000 f922 	bl	80003b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f005 ff04 	bl	8005f80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarea1 */
  Tarea1Handle = osThreadNew(AbrirArchivo, NULL, &Tarea1_attributes);
 8000178:	4a11      	ldr	r2, [pc, #68]	; (80001c0 <main+0x70>)
 800017a:	2100      	movs	r1, #0
 800017c:	4811      	ldr	r0, [pc, #68]	; (80001c4 <main+0x74>)
 800017e:	f005 ff65 	bl	800604c <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <main+0x78>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of Tarea2 */
  Tarea2Handle = osThreadNew(Reproducir, NULL, &Tarea2_attributes);
 8000188:	4a10      	ldr	r2, [pc, #64]	; (80001cc <main+0x7c>)
 800018a:	2100      	movs	r1, #0
 800018c:	4810      	ldr	r0, [pc, #64]	; (80001d0 <main+0x80>)
 800018e:	f005 ff5d 	bl	800604c <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <main+0x84>)
 8000196:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000198:	f005 ff24 	bl	8005fe4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800019c:	2100      	movs	r1, #0
 800019e:	480e      	ldr	r0, [pc, #56]	; (80001d8 <main+0x88>)
 80001a0:	f002 fc02 	bl	80029a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 80001a4:	480d      	ldr	r0, [pc, #52]	; (80001dc <main+0x8c>)
 80001a6:	f002 fb0b 	bl	80027c0 <HAL_TIM_Base_Start>
  fres = f_mount(&FatFs, "", 1); //1=mount now
 80001aa:	2201      	movs	r2, #1
 80001ac:	490c      	ldr	r1, [pc, #48]	; (80001e0 <main+0x90>)
 80001ae:	480d      	ldr	r0, [pc, #52]	; (80001e4 <main+0x94>)
 80001b0:	f005 f974 	bl	800549c <f_mount>
 80001b4:	4603      	mov	r3, r0
 80001b6:	461a      	mov	r2, r3
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0x98>)
 80001ba:	701a      	strb	r2, [r3, #0]
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x6c>
 80001be:	bf00      	nop
 80001c0:	08008f24 	.word	0x08008f24
 80001c4:	08000521 	.word	0x08000521
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08008f48 	.word	0x08008f48
 80001d0:	0800054d 	.word	0x0800054d
 80001d4:	200001d8 	.word	0x200001d8
 80001d8:	20000100 	.word	0x20000100
 80001dc:	20000148 	.word	0x20000148
 80001e0:	08008ea8 	.word	0x08008ea8
 80001e4:	200001e0 	.word	0x200001e0
 80001e8:	20000640 	.word	0x20000640

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f008 fd7a 	bl	8008cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fb66 	bl	80018f4 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022e:	f000 f9cd 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fdd4 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000256:	f000 f9b9 	bl	80005cc <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <MX_SPI1_Init+0x64>)
 800026a:	4a18      	ldr	r2, [pc, #96]	; (80002cc <MX_SPI1_Init+0x68>)
 800026c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <MX_SPI1_Init+0x64>)
 8000270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MX_SPI1_Init+0x64>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <MX_SPI1_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_SPI1_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <MX_SPI1_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_SPI1_Init+0x64>)
 8000290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000294:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_SPI1_Init+0x64>)
 8000298:	2220      	movs	r2, #32
 800029a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <MX_SPI1_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_SPI1_Init+0x64>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <MX_SPI1_Init+0x64>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_SPI1_Init+0x64>)
 80002b0:	220a      	movs	r2, #10
 80002b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <MX_SPI1_Init+0x64>)
 80002b6:	f001 ff67 	bl	8002188 <HAL_SPI_Init>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002c0:	f000 f984 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200000a8 	.word	0x200000a8
 80002cc:	40013000 	.word	0x40013000

080002d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08e      	sub	sp, #56	; 0x38
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	f107 0320 	add.w	r3, r7, #32
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]
 80002fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <MX_TIM2_Init+0xe4>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000316:	22ff      	movs	r2, #255	; 0xff
 8000318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031a:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <MX_TIM2_Init+0xe4>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000326:	4823      	ldr	r0, [pc, #140]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000328:	f002 f9fa 	bl	8002720 <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000332:	f000 f94b 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000340:	4619      	mov	r1, r3
 8000342:	481c      	ldr	r0, [pc, #112]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000344:	f002 fd98 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800034e:	f000 f93d 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000352:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000354:	f002 fad0 	bl	80028f8 <HAL_TIM_PWM_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800035e:	f000 f935 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000366:	2300      	movs	r3, #0
 8000368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036a:	f107 0320 	add.w	r3, r7, #32
 800036e:	4619      	mov	r1, r3
 8000370:	4810      	ldr	r0, [pc, #64]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000372:	f003 f90d 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800037c:	f000 f926 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000380:	2360      	movs	r3, #96	; 0x60
 8000382:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	4619      	mov	r1, r3
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <MX_TIM2_Init+0xe4>)
 8000398:	f002 fcb0 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80003a2:	f000 f913 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <MX_TIM2_Init+0xe4>)
 80003a8:	f000 f9d0 	bl	800074c <HAL_TIM_MspPostInit>

}
 80003ac:	bf00      	nop
 80003ae:	3738      	adds	r7, #56	; 0x38
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000100 	.word	0x20000100

080003b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <MX_TIM3_Init+0x90>)
 80003d6:	4a1d      	ldr	r2, [pc, #116]	; (800044c <MX_TIM3_Init+0x94>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_TIM3_Init+0x90>)
 80003dc:	2247      	movs	r2, #71	; 0x47
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <MX_TIM3_Init+0x90>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 124;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_TIM3_Init+0x90>)
 80003e8:	227c      	movs	r2, #124	; 0x7c
 80003ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_TIM3_Init+0x90>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_TIM3_Init+0x90>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f8:	4813      	ldr	r0, [pc, #76]	; (8000448 <MX_TIM3_Init+0x90>)
 80003fa:	f002 f991 	bl	8002720 <HAL_TIM_Base_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000404:	f000 f8e2 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4619      	mov	r1, r3
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_TIM3_Init+0x90>)
 8000416:	f002 fd2f 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000420:	f000 f8d4 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_TIM3_Init+0x90>)
 8000432:	f003 f8ad 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800043c:	f000 f8c6 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000148 	.word	0x20000148
 800044c:	40000400 	.word	0x40000400

08000450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <MX_USART1_UART_Init+0x50>)
 8000458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <MX_USART1_UART_Init+0x4c>)
 800045c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART1_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_USART1_UART_Init+0x4c>)
 8000488:	f003 f8f2 	bl	8003670 <HAL_UART_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000492:	f000 f89b 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000190 	.word	0x20000190
 80004a0:	40013800 	.word	0x40013800

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_GPIO_Init+0x74>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a16      	ldr	r2, [pc, #88]	; (8000518 <MX_GPIO_Init+0x74>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <MX_GPIO_Init+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_GPIO_Init+0x74>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <MX_GPIO_Init+0x74>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_GPIO_Init+0x74>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2102      	movs	r1, #2
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <MX_GPIO_Init+0x78>)
 80004ee:	f001 f9e9 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80004f2:	2302      	movs	r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2302      	movs	r3, #2
 8000500:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	4619      	mov	r1, r3
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <MX_GPIO_Init+0x78>)
 800050a:	f001 f857 	bl	80015bc <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010c00 	.word	0x40010c00

08000520 <AbrirArchivo>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_AbrirArchivo */
void AbrirArchivo(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  fres = f_open(&fil, "cancion.txt", FA_READ);
 8000528:	2201      	movs	r2, #1
 800052a:	4905      	ldr	r1, [pc, #20]	; (8000540 <AbrirArchivo+0x20>)
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <AbrirArchivo+0x24>)
 800052e:	f005 f81d 	bl	800556c <f_open>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <AbrirArchivo+0x28>)
 8000538:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  osThreadExit();
 800053a:	f005 fe31 	bl	80061a0 <osThreadExit>
 800053e:	bf00      	nop
 8000540:	08008eac 	.word	0x08008eac
 8000544:	20000414 	.word	0x20000414
 8000548:	20000640 	.word	0x20000640

0800054c <Reproducir>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Reproducir */
void Reproducir(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Reproducir */
  /* Infinite loop */
  for(;;)
  {
	TCHAR* rres = f_gets((TCHAR*)readBuf, 512, &fil);
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <Reproducir+0x48>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <Reproducir+0x4c>)
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fc3e 	bl	8005de0 <f_gets>
 8000564:	60f8      	str	r0, [r7, #12]
	idx = (idx + 1) % 0x002B442C; //0x002B442C long del archivo
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <Reproducir+0x50>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <Reproducir+0x54>)
 800056e:	fb82 1203 	smull	r1, r2, r2, r3
 8000572:	441a      	add	r2, r3
 8000574:	1551      	asrs	r1, r2, #21
 8000576:	17da      	asrs	r2, r3, #31
 8000578:	1a8a      	subs	r2, r1, r2
 800057a:	490a      	ldr	r1, [pc, #40]	; (80005a4 <Reproducir+0x58>)
 800057c:	fb01 f202 	mul.w	r2, r1, r2
 8000580:	1a9a      	subs	r2, r3, r2
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <Reproducir+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
	TIM2->CCR1 = readBuf;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <Reproducir+0x48>)
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000590:	e7e0      	b.n	8000554 <Reproducir+0x8>
 8000592:	bf00      	nop
 8000594:	20000641 	.word	0x20000641
 8000598:	20000414 	.word	0x20000414
 800059c:	200001dc 	.word	0x200001dc
 80005a0:	bd56cccf 	.word	0xbd56cccf
 80005a4:	002b442c 	.word	0x002b442c

080005a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ba:	f000 ff03 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {

  }
  /* USER CODE END Callback 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40000800 	.word	0x40000800

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_MspInit+0x68>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <HAL_MspInit+0x68>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_MspInit+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_MspInit+0x68>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <HAL_MspInit+0x68>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x68>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	f06f 0001 	mvn.w	r0, #1
 8000616:	f000 ffa6 	bl	8001566 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_MspInit+0x6c>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_MspInit+0x6c>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000
 8000644:	40010000 	.word	0x40010000

08000648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <HAL_SPI_MspInit+0x88>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d12f      	bne.n	80006c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 800066e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_SPI_MspInit+0x8c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <HAL_SPI_MspInit+0x90>)
 80006ac:	f000 ff86 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_SPI_MspInit+0x90>)
 80006c4:	f000 ff7a 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013000 	.word	0x40013000
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800

080006dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	d114      	bne.n	8000718 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2105      	movs	r1, #5
 800070a:	201c      	movs	r0, #28
 800070c:	f000 ff2b 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000710:	201c      	movs	r0, #28
 8000712:	f000 ff44 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000716:	e010      	b.n	800073a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_TIM_Base_MspInit+0x6c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_TIM_Base_MspInit+0x68>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	40000400 	.word	0x40000400

0800074c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800076a:	d117      	bne.n	800079c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <HAL_TIM_MspPostInit+0x5c>)
 8000798:	f000 ff10 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <HAL_UART_MspInit+0x8c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d131      	bne.n	8000830 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_UART_MspInit+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <HAL_UART_MspInit+0x90>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <HAL_UART_MspInit+0x90>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_UART_MspInit+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_UART_MspInit+0x94>)
 8000812:	f000 fed3 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_UART_MspInit+0x94>)
 800082c:	f000 fec6 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40013800 	.word	0x40013800
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <HAL_InitTick+0xe8>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a33      	ldr	r2, [pc, #204]	; (800092c <HAL_InitTick+0xe8>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <HAL_InitTick+0xe8>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000872:	f107 0210 	add.w	r2, r7, #16
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fc35 	bl	80020ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800088c:	f001 fc06 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8000890:	6378      	str	r0, [r7, #52]	; 0x34
 8000892:	e004      	b.n	800089e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000894:	f001 fc02 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8000898:	4603      	mov	r3, r0
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	4a23      	ldr	r2, [pc, #140]	; (8000930 <HAL_InitTick+0xec>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	0c9b      	lsrs	r3, r3, #18
 80008a8:	3b01      	subs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <HAL_InitTick+0xf0>)
 80008ae:	4a22      	ldr	r2, [pc, #136]	; (8000938 <HAL_InitTick+0xf4>)
 80008b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_InitTick+0xf0>)
 80008b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008ba:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <HAL_InitTick+0xf0>)
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_InitTick+0xf0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_InitTick+0xf0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_InitTick+0xf0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008d2:	4818      	ldr	r0, [pc, #96]	; (8000934 <HAL_InitTick+0xf0>)
 80008d4:	f001 ff24 	bl	8002720 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d11b      	bne.n	800091e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <HAL_InitTick+0xf0>)
 80008e8:	f001 ffb4 	bl	8002854 <HAL_TIM_Base_Start_IT>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d111      	bne.n	800091e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008fa:	201e      	movs	r0, #30
 80008fc:	f000 fe4f 	bl	800159e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d808      	bhi.n	8000918 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000906:	2200      	movs	r2, #0
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	201e      	movs	r0, #30
 800090c:	f000 fe2b 	bl	8001566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0xf8>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e002      	b.n	800091e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800091e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000922:	4618      	mov	r0, r3
 8000924:	3738      	adds	r7, #56	; 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	431bde83 	.word	0x431bde83
 8000934:	20000644 	.word	0x20000644
 8000938:	40000800 	.word	0x40000800
 800093c:	20000008 	.word	0x20000008

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <TIM2_IRQHandler+0x10>)
 8000972:	f002 f8bb 	bl	8002aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000100 	.word	0x20000100

08000980 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM4_IRQHandler+0x10>)
 8000986:	f002 f8b1 	bl	8002aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000644 	.word	0x20000644

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80009a8:	f000 fd1e 	bl	80013e8 <HAL_GetTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <SPI_Timer_On+0x20>)
 80009b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <SPI_Timer_On+0x24>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000690 	.word	0x20000690
 80009c4:	20000694 	.word	0x20000694

080009c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80009cc:	f000 fd0c 	bl	80013e8 <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SPI_Timer_Status+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1ad2      	subs	r2, r2, r3
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SPI_Timer_Status+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	bf34      	ite	cc
 80009e0:	2301      	movcc	r3, #1
 80009e2:	2300      	movcs	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000690 	.word	0x20000690
 80009f0:	20000694 	.word	0x20000694

080009f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80009fe:	f107 020f 	add.w	r2, r7, #15
 8000a02:	1df9      	adds	r1, r7, #7
 8000a04:	2332      	movs	r3, #50	; 0x32
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <xchg_spi+0x28>)
 8000a0c:	f001 fc40 	bl	8002290 <HAL_SPI_TransmitReceive>
    return rxDat;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000a8 	.word	0x200000a8

08000a20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	static const uint8_t dummy[2048]={[0 ... 2047]=0xFF};
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, dummy, buff, btr, 50);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2232      	movs	r2, #50	; 0x32
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4903      	ldr	r1, [pc, #12]	; (8000a44 <rcvr_spi_multi+0x24>)
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <rcvr_spi_multi+0x28>)
 8000a38:	f001 fc2a 	bl	8002290 <HAL_SPI_TransmitReceive>

	/*
	for(UINT i=0; i<btr; i++) {
		*(buff+i) = xchg_spi(0xFF);
	}*/
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08008f84 	.word	0x08008f84
 8000a48:	200000a8 	.word	0x200000a8

08000a4c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e009      	b.n	8000a70 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffc5 	bl	80009f4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d3f1      	bcc.n	8000a5c <xmit_spi_multi+0x10>
	}
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8000a8a:	f000 fcad 	bl	80013e8 <HAL_GetTick>
 8000a8e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8000a94:	20ff      	movs	r0, #255	; 0xff
 8000a96:	f7ff ffad 	bl	80009f4 <xchg_spi>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2bff      	cmp	r3, #255	; 0xff
 8000aa2:	d007      	beq.n	8000ab4 <wait_ready+0x32>
 8000aa4:	f000 fca0 	bl	80013e8 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8ef      	bhi.n	8000a94 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	2bff      	cmp	r3, #255	; 0xff
 8000ab8:	bf0c      	ite	eq
 8000aba:	2301      	moveq	r3, #1
 8000abc:	2300      	movne	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8000acc:	2201      	movs	r2, #1
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <despiselect+0x18>)
 8000ad2:	f000 fef7 	bl	80018c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	f7ff ff8c 	bl	80009f4 <xchg_spi>

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <spiselect+0x30>)
 8000aee:	f000 fee9 	bl	80018c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8000af2:	20ff      	movs	r0, #255	; 0xff
 8000af4:	f7ff ff7e 	bl	80009f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f7ff ffc1 	bl	8000a82 <wait_ready>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <spiselect+0x26>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e002      	b.n	8000b10 <spiselect+0x2c>

	despiselect();
 8000b0a:	f7ff ffdd 	bl	8000ac8 <despiselect>
	return 0;	/* Timeout */
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8000b22:	20c8      	movs	r0, #200	; 0xc8
 8000b24:	f7ff ff3c 	bl	80009a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8000b28:	20ff      	movs	r0, #255	; 0xff
 8000b2a:	f7ff ff63 	bl	80009f4 <xchg_spi>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2bff      	cmp	r3, #255	; 0xff
 8000b36:	d104      	bne.n	8000b42 <rcvr_datablock+0x2a>
 8000b38:	f7ff ff46 	bl	80009c8 <SPI_Timer_Status>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f2      	bne.n	8000b28 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2bfe      	cmp	r3, #254	; 0xfe
 8000b46:	d001      	beq.n	8000b4c <rcvr_datablock+0x34>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e00a      	b.n	8000b62 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8000b4c:	6839      	ldr	r1, [r7, #0]
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff66 	bl	8000a20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	f7ff ff4d 	bl	80009f4 <xchg_spi>
 8000b5a:	20ff      	movs	r0, #255	; 0xff
 8000b5c:	f7ff ff4a 	bl	80009f4 <xchg_spi>

	return 1;						/* Function succeeded */
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f7ff ff82 	bl	8000a82 <wait_ready>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <xmit_datablock+0x1e>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e01e      	b.n	8000bc6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff32 	bl	80009f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2bfd      	cmp	r3, #253	; 0xfd
 8000b94:	d016      	beq.n	8000bc4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8000b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff56 	bl	8000a4c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	f7ff ff27 	bl	80009f4 <xchg_spi>
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f7ff ff24 	bl	80009f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8000bac:	20ff      	movs	r0, #255	; 0xff
 8000bae:	f7ff ff21 	bl	80009f4 <xchg_spi>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d001      	beq.n	8000bc4 <xmit_datablock+0x5a>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e000      	b.n	8000bc6 <xmit_datablock+0x5c>
	}
	return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	6039      	str	r1, [r7, #0]
 8000bd8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da0e      	bge.n	8000c00 <send_cmd+0x32>
		cmd &= 0x7F;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000be8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2037      	movs	r0, #55	; 0x37
 8000bee:	f7ff ffee 	bl	8000bce <send_cmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d901      	bls.n	8000c00 <send_cmd+0x32>
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	e051      	b.n	8000ca4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b0c      	cmp	r3, #12
 8000c04:	d008      	beq.n	8000c18 <send_cmd+0x4a>
		despiselect();
 8000c06:	f7ff ff5f 	bl	8000ac8 <despiselect>
		if (!spiselect()) return 0xFF;
 8000c0a:	f7ff ff6b 	bl	8000ae4 <spiselect>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <send_cmd+0x4a>
 8000c14:	23ff      	movs	r3, #255	; 0xff
 8000c16:	e045      	b.n	8000ca4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fee7 	bl	80009f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fee1 	bl	80009f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	0c1b      	lsrs	r3, r3, #16
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fedb 	bl	80009f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fed5 	bl	80009f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fed0 	bl	80009f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <send_cmd+0x94>
 8000c5e:	2395      	movs	r3, #149	; 0x95
 8000c60:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d101      	bne.n	8000c6c <send_cmd+0x9e>
 8000c68:	2387      	movs	r3, #135	; 0x87
 8000c6a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fec0 	bl	80009f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	d102      	bne.n	8000c80 <send_cmd+0xb2>
 8000c7a:	20ff      	movs	r0, #255	; 0xff
 8000c7c:	f7ff feba 	bl	80009f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8000c80:	230a      	movs	r3, #10
 8000c82:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8000c84:	20ff      	movs	r0, #255	; 0xff
 8000c86:	f7ff feb5 	bl	80009f4 <xchg_spi>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8000c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da05      	bge.n	8000ca2 <send_cmd+0xd4>
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <send_cmd+0xb6>

	return res;							/* Return received response */
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <USER_SPI_initialize+0x14>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e0d4      	b.n	8000e6a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8000cc0:	4b6c      	ldr	r3, [pc, #432]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <USER_SPI_initialize+0x2a>
 8000cce:	4b69      	ldr	r3, [pc, #420]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	e0c9      	b.n	8000e6a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8000cd6:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <USER_SPI_initialize+0x1cc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <USER_SPI_initialize+0x1cc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8000ce4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e005      	b.n	8000cf8 <USER_SPI_initialize+0x4c>
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	f7ff fe81 	bl	80009f4 <xchg_spi>
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f6      	bne.n	8000cec <USER_SPI_initialize+0x40>

	ty = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff62 	bl	8000bce <send_cmd>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	f040 808b 	bne.w	8000e28 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f7ff fe43 	bl	80009a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8000d1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d1e:	2008      	movs	r0, #8
 8000d20:	f7ff ff55 	bl	8000bce <send_cmd>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d151      	bne.n	8000dce <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00d      	b.n	8000d4c <USER_SPI_initialize+0xa0>
 8000d30:	7bfc      	ldrb	r4, [r7, #15]
 8000d32:	20ff      	movs	r0, #255	; 0xff
 8000d34:	f7ff fe5e 	bl	80009f4 <xchg_spi>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f104 0310 	add.w	r3, r4, #16
 8000d40:	443b      	add	r3, r7
 8000d42:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d9ee      	bls.n	8000d30 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8000d52:	7abb      	ldrb	r3, [r7, #10]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d167      	bne.n	8000e28 <USER_SPI_initialize+0x17c>
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	2baa      	cmp	r3, #170	; 0xaa
 8000d5c:	d164      	bne.n	8000e28 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8000d5e:	bf00      	nop
 8000d60:	f7ff fe32 	bl	80009c8 <SPI_Timer_Status>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <USER_SPI_initialize+0xce>
 8000d6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d6e:	20a9      	movs	r0, #169	; 0xa9
 8000d70:	f7ff ff2d 	bl	8000bce <send_cmd>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f2      	bne.n	8000d60 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8000d7a:	f7ff fe25 	bl	80009c8 <SPI_Timer_Status>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d051      	beq.n	8000e28 <USER_SPI_initialize+0x17c>
 8000d84:	2100      	movs	r1, #0
 8000d86:	203a      	movs	r0, #58	; 0x3a
 8000d88:	f7ff ff21 	bl	8000bce <send_cmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14a      	bne.n	8000e28 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e00d      	b.n	8000db4 <USER_SPI_initialize+0x108>
 8000d98:	7bfc      	ldrb	r4, [r7, #15]
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	f7ff fe2a 	bl	80009f4 <xchg_spi>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	f104 0310 	add.w	r3, r4, #16
 8000da8:	443b      	add	r3, r7
 8000daa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d9ee      	bls.n	8000d98 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <USER_SPI_initialize+0x11c>
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	e000      	b.n	8000dca <USER_SPI_initialize+0x11e>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	737b      	strb	r3, [r7, #13]
 8000dcc:	e02c      	b.n	8000e28 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8000dce:	2100      	movs	r1, #0
 8000dd0:	20a9      	movs	r0, #169	; 0xa9
 8000dd2:	f7ff fefc 	bl	8000bce <send_cmd>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d804      	bhi.n	8000de6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8000ddc:	2302      	movs	r3, #2
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	23a9      	movs	r3, #169	; 0xa9
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	e003      	b.n	8000dee <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8000de6:	2301      	movs	r3, #1
 8000de8:	737b      	strb	r3, [r7, #13]
 8000dea:	2301      	movs	r3, #1
 8000dec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8000dee:	bf00      	nop
 8000df0:	f7ff fdea 	bl	80009c8 <SPI_Timer_Status>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <USER_SPI_initialize+0x15e>
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fee5 	bl	8000bce <send_cmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f2      	bne.n	8000df0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8000e0a:	f7ff fddd 	bl	80009c8 <SPI_Timer_Status>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <USER_SPI_initialize+0x178>
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f7ff fed8 	bl	8000bce <send_cmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <USER_SPI_initialize+0x17c>
				ty = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <USER_SPI_initialize+0x1d0>)
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8000e2e:	f7ff fe4b 	bl	8000ac8 <despiselect>

	if (ty) {			/* OK */
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d012      	beq.n	8000e5e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <USER_SPI_initialize+0x1cc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <USER_SPI_initialize+0x1cc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0218 	orr.w	r2, r2, #24
 8000e4a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e002      	b.n	8000e64 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <USER_SPI_initialize+0x1c8>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000004 	.word	0x20000004
 8000e78:	200000a8 	.word	0x200000a8
 8000e7c:	2000068c 	.word	0x2000068c

08000e80 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <USER_SPI_status+0x14>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e002      	b.n	8000e9a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <USER_SPI_status+0x24>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <USER_SPI_read+0x1c>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <USER_SPI_read+0x20>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e04d      	b.n	8000f64 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <USER_SPI_read+0xc4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <USER_SPI_read+0x32>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e044      	b.n	8000f64 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <USER_SPI_read+0xc8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <USER_SPI_read+0x44>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d111      	bne.n	8000f16 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	2011      	movs	r0, #17
 8000ef6:	f7ff fe6a 	bl	8000bce <send_cmd>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d129      	bne.n	8000f54 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f7ff fe07 	bl	8000b18 <rcvr_datablock>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d021      	beq.n	8000f54 <USER_SPI_read+0xac>
			count = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	e01e      	b.n	8000f54 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2012      	movs	r0, #18
 8000f1a:	f7ff fe58 	bl	8000bce <send_cmd>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d117      	bne.n	8000f54 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fdf5 	bl	8000b18 <rcvr_datablock>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <USER_SPI_read+0xa2>
				buff += 512;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f3a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1ed      	bne.n	8000f24 <USER_SPI_read+0x7c>
 8000f48:	e000      	b.n	8000f4c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8000f4a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200c      	movs	r0, #12
 8000f50:	f7ff fe3d 	bl	8000bce <send_cmd>
		}
	}
	despiselect();
 8000f54:	f7ff fdb8 	bl	8000ac8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	2000068c 	.word	0x2000068c

08000f74 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <USER_SPI_write+0x1c>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <USER_SPI_write+0x20>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e063      	b.n	800105c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <USER_SPI_write+0xf0>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <USER_SPI_write+0x32>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e05a      	b.n	800105c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <USER_SPI_write+0xf0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <USER_SPI_write+0x44>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e051      	b.n	800105c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <USER_SPI_write+0xf4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <USER_SPI_write+0x56>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d110      	bne.n	8000ff2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	2018      	movs	r0, #24
 8000fd4:	f7ff fdfb 	bl	8000bce <send_cmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d136      	bne.n	800104c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8000fde:	21fe      	movs	r1, #254	; 0xfe
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	f7ff fdc2 	bl	8000b6a <xmit_datablock>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d02f      	beq.n	800104c <USER_SPI_write+0xd8>
			count = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	e02c      	b.n	800104c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <USER_SPI_write+0xf4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	f003 0306 	and.w	r3, r3, #6
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <USER_SPI_write+0x92>
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	2097      	movs	r0, #151	; 0x97
 8001002:	f7ff fde4 	bl	8000bce <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	2019      	movs	r0, #25
 800100a:	f7ff fde0 	bl	8000bce <send_cmd>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d11b      	bne.n	800104c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8001014:	21fc      	movs	r1, #252	; 0xfc
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f7ff fda7 	bl	8000b6a <xmit_datablock>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <USER_SPI_write+0xc4>
				buff += 512;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001028:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1ee      	bne.n	8001014 <USER_SPI_write+0xa0>
 8001036:	e000      	b.n	800103a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8001038:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800103a:	21fd      	movs	r1, #253	; 0xfd
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fd94 	bl	8000b6a <xmit_datablock>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <USER_SPI_write+0xd8>
 8001048:	2301      	movs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800104c:	f7ff fd3c 	bl	8000ac8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000004 	.word	0x20000004
 8001068:	2000068c 	.word	0x2000068c

0800106c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	460b      	mov	r3, r1
 800107a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <USER_SPI_ioctl+0x1a>
 8001082:	2304      	movs	r3, #4
 8001084:	e15a      	b.n	800133c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001086:	4baf      	ldr	r3, [pc, #700]	; (8001344 <USER_SPI_ioctl+0x2d8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <USER_SPI_ioctl+0x2c>
 8001094:	2303      	movs	r3, #3
 8001096:	e151      	b.n	800133c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	f200 8136 	bhi.w	8001312 <USER_SPI_ioctl+0x2a6>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <USER_SPI_ioctl+0x40>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010c1 	.word	0x080010c1
 80010b0:	080010d5 	.word	0x080010d5
 80010b4:	08001313 	.word	0x08001313
 80010b8:	08001181 	.word	0x08001181
 80010bc:	08001277 	.word	0x08001277
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80010c0:	f7ff fd10 	bl	8000ae4 <spiselect>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8127 	beq.w	800131a <USER_SPI_ioctl+0x2ae>
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80010d2:	e122      	b.n	800131a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80010d4:	2100      	movs	r1, #0
 80010d6:	2009      	movs	r0, #9
 80010d8:	f7ff fd79 	bl	8000bce <send_cmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f040 811d 	bne.w	800131e <USER_SPI_ioctl+0x2b2>
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2110      	movs	r1, #16
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fd14 	bl	8000b18 <rcvr_datablock>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8113 	beq.w	800131e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	099b      	lsrs	r3, r3, #6
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d111      	bne.n	8001126 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001102:	7d7b      	ldrb	r3, [r7, #21]
 8001104:	461a      	mov	r2, r3
 8001106:	7d3b      	ldrb	r3, [r7, #20]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4413      	add	r3, r2
 800110c:	461a      	mov	r2, r3
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	041b      	lsls	r3, r3, #16
 8001112:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001116:	4413      	add	r3, r2
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	029a      	lsls	r2, r3, #10
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e028      	b.n	8001178 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001126:	7c7b      	ldrb	r3, [r7, #17]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	b2da      	uxtb	r2, r3
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	09db      	lsrs	r3, r3, #7
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	7d7b      	ldrb	r3, [r7, #21]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0306 	and.w	r3, r3, #6
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3302      	adds	r3, #2
 800114a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800114e:	7d3b      	ldrb	r3, [r7, #20]
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	441a      	add	r2, r3
 800115c:	7cbb      	ldrb	r3, [r7, #18]
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001164:	4413      	add	r3, r2
 8001166:	3301      	adds	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800116a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800116e:	3b09      	subs	r3, #9
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	409a      	lsls	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800117e:	e0ce      	b.n	800131e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8001180:	4b71      	ldr	r3, [pc, #452]	; (8001348 <USER_SPI_ioctl+0x2dc>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d031      	beq.n	80011f0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800118c:	2100      	movs	r1, #0
 800118e:	208d      	movs	r0, #141	; 0x8d
 8001190:	f7ff fd1d 	bl	8000bce <send_cmd>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80c3 	bne.w	8001322 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800119c:	20ff      	movs	r0, #255	; 0xff
 800119e:	f7ff fc29 	bl	80009f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2110      	movs	r1, #16
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fcb5 	bl	8000b18 <rcvr_datablock>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b6 	beq.w	8001322 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80011b6:	2330      	movs	r3, #48	; 0x30
 80011b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80011bc:	e007      	b.n	80011ce <USER_SPI_ioctl+0x162>
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	f7ff fc18 	bl	80009f4 <xchg_spi>
 80011c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011c8:	3b01      	subs	r3, #1
 80011ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80011ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f3      	bne.n	80011be <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80011d6:	7dbb      	ldrb	r3, [r7, #22]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	2310      	movs	r3, #16
 80011e0:	fa03 f202 	lsl.w	r2, r3, r2
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80011ee:	e098      	b.n	8001322 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80011f0:	2100      	movs	r1, #0
 80011f2:	2009      	movs	r0, #9
 80011f4:	f7ff fceb 	bl	8000bce <send_cmd>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8091 	bne.w	8001322 <USER_SPI_ioctl+0x2b6>
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2110      	movs	r1, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc86 	bl	8000b18 <rcvr_datablock>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8087 	beq.w	8001322 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <USER_SPI_ioctl+0x2dc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d012      	beq.n	8001246 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001220:	7dbb      	ldrb	r3, [r7, #22]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001228:	7dfa      	ldrb	r2, [r7, #23]
 800122a:	09d2      	lsrs	r2, r2, #7
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	4413      	add	r3, r2
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	7e7b      	ldrb	r3, [r7, #25]
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	461a      	mov	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e013      	b.n	800126e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001246:	7dbb      	ldrb	r3, [r7, #22]
 8001248:	109b      	asrs	r3, r3, #2
 800124a:	b29b      	uxth	r3, r3
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	3301      	adds	r3, #1
 8001252:	7dfa      	ldrb	r2, [r7, #23]
 8001254:	00d2      	lsls	r2, r2, #3
 8001256:	f002 0218 	and.w	r2, r2, #24
 800125a:	7df9      	ldrb	r1, [r7, #23]
 800125c:	0949      	lsrs	r1, r1, #5
 800125e:	b2c9      	uxtb	r1, r1
 8001260:	440a      	add	r2, r1
 8001262:	3201      	adds	r2, #1
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	461a      	mov	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8001274:	e055      	b.n	8001322 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <USER_SPI_ioctl+0x2dc>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 0306 	and.w	r3, r3, #6
 800127e:	2b00      	cmp	r3, #0
 8001280:	d051      	beq.n	8001326 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	210b      	movs	r1, #11
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff feee 	bl	800106c <USER_SPI_ioctl>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d149      	bne.n	800132a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d104      	bne.n	80012aa <USER_SPI_ioctl+0x23e>
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d041      	beq.n	800132e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	623b      	str	r3, [r7, #32]
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <USER_SPI_ioctl+0x2dc>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80012d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012d4:	2020      	movs	r0, #32
 80012d6:	f7ff fc7a 	bl	8000bce <send_cmd>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d128      	bne.n	8001332 <USER_SPI_ioctl+0x2c6>
 80012e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e2:	2021      	movs	r0, #33	; 0x21
 80012e4:	f7ff fc73 	bl	8000bce <send_cmd>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d121      	bne.n	8001332 <USER_SPI_ioctl+0x2c6>
 80012ee:	2100      	movs	r1, #0
 80012f0:	2026      	movs	r0, #38	; 0x26
 80012f2:	f7ff fc6c 	bl	8000bce <send_cmd>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d11a      	bne.n	8001332 <USER_SPI_ioctl+0x2c6>
 80012fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8001300:	f7ff fbbf 	bl	8000a82 <wait_ready>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800130a:	2300      	movs	r3, #0
 800130c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8001310:	e00f      	b.n	8001332 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8001312:	2304      	movs	r3, #4
 8001314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001318:	e00c      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		break;
 800131a:	bf00      	nop
 800131c:	e00a      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		break;
 800131e:	bf00      	nop
 8001320:	e008      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		break;
 8001322:	bf00      	nop
 8001324:	e006      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001326:	bf00      	nop
 8001328:	e004      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800132a:	bf00      	nop
 800132c:	e002      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <USER_SPI_ioctl+0x2c8>
		break;
 8001332:	bf00      	nop
	}

	despiselect();
 8001334:	f7ff fbc8 	bl	8000ac8 <despiselect>

	return res;
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800133c:	4618      	mov	r0, r3
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	2000068c 	.word	0x2000068c

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001372:	f7ff fb0f 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f007 fc89 	bl	8008c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7fe fee9 	bl	8000150 <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001388:	0800986c 	.word	0x0800986c
  ldr r2, =_sbss
 800138c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001390:	200020e0 	.word	0x200020e0

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f8d1 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f7ff fa48 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff f910 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_IncTick+0x20>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000698 	.word	0x20000698

080013e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000698 	.word	0x20000698

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff4f 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff64 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ffb2 	bl	80014ec <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff81 	bl	8001498 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff57 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e169      	b.n	80018a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d0:	2201      	movs	r2, #1
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 8158 	bne.w	800189e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a9a      	ldr	r2, [pc, #616]	; (800185c <HAL_GPIO_Init+0x2a0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d05e      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 80015f8:	4a98      	ldr	r2, [pc, #608]	; (800185c <HAL_GPIO_Init+0x2a0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d875      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 80015fe:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2a4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d058      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001604:	4a96      	ldr	r2, [pc, #600]	; (8001860 <HAL_GPIO_Init+0x2a4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d86f      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800160a:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2a8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d052      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001610:	4a94      	ldr	r2, [pc, #592]	; (8001864 <HAL_GPIO_Init+0x2a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d869      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001616:	4a94      	ldr	r2, [pc, #592]	; (8001868 <HAL_GPIO_Init+0x2ac>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d04c      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 800161c:	4a92      	ldr	r2, [pc, #584]	; (8001868 <HAL_GPIO_Init+0x2ac>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d863      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001622:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_GPIO_Init+0x2b0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d046      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001628:	4a90      	ldr	r2, [pc, #576]	; (800186c <HAL_GPIO_Init+0x2b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d85d      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d82a      	bhi.n	8001688 <HAL_GPIO_Init+0xcc>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d859      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <HAL_GPIO_Init+0x80>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	080016b7 	.word	0x080016b7
 8001640:	08001691 	.word	0x08001691
 8001644:	080016a3 	.word	0x080016a3
 8001648:	080016e5 	.word	0x080016e5
 800164c:	080016eb 	.word	0x080016eb
 8001650:	080016eb 	.word	0x080016eb
 8001654:	080016eb 	.word	0x080016eb
 8001658:	080016eb 	.word	0x080016eb
 800165c:	080016eb 	.word	0x080016eb
 8001660:	080016eb 	.word	0x080016eb
 8001664:	080016eb 	.word	0x080016eb
 8001668:	080016eb 	.word	0x080016eb
 800166c:	080016eb 	.word	0x080016eb
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016eb 	.word	0x080016eb
 8001678:	080016eb 	.word	0x080016eb
 800167c:	080016eb 	.word	0x080016eb
 8001680:	08001699 	.word	0x08001699
 8001684:	080016ad 	.word	0x080016ad
 8001688:	4a79      	ldr	r2, [pc, #484]	; (8001870 <HAL_GPIO_Init+0x2b4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168e:	e02c      	b.n	80016ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e029      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e024      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3308      	adds	r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e01f      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e01a      	b.n	80016ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e013      	b.n	80016ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	611a      	str	r2, [r3, #16]
          break;
 80016d6:	e009      	b.n	80016ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	615a      	str	r2, [r3, #20]
          break;
 80016e2:	e003      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x130>
          break;
 80016ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d801      	bhi.n	80016f6 <HAL_GPIO_Init+0x13a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_Init+0x13e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d802      	bhi.n	8001708 <HAL_GPIO_Init+0x14c>
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x152>
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	3b08      	subs	r3, #8
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	210f      	movs	r1, #15
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	6a39      	ldr	r1, [r7, #32]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80b1 	beq.w	800189e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800173c:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a40      	ldr	r2, [pc, #256]	; (800187c <HAL_GPIO_Init+0x2c0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x1ec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x1e8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x1e4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3d      	ldr	r2, [pc, #244]	; (8001888 <HAL_GPIO_Init+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x1e0>
 8001798:	2303      	movs	r3, #3
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 800179c:	2304      	movs	r3, #4
 800179e:	e004      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ba:	492f      	ldr	r1, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	492c      	ldr	r1, [pc, #176]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4928      	ldr	r1, [pc, #160]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4922      	ldr	r1, [pc, #136]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	491e      	ldr	r1, [pc, #120]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4918      	ldr	r1, [pc, #96]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4914      	ldr	r1, [pc, #80]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	e021      	b.n	800189e <HAL_GPIO_Init+0x2e2>
 800185a:	bf00      	nop
 800185c:	10320000 	.word	0x10320000
 8001860:	10310000 	.word	0x10310000
 8001864:	10220000 	.word	0x10220000
 8001868:	10210000 	.word	0x10210000
 800186c:	10120000 	.word	0x10120000
 8001870:	10110000 	.word	0x10110000
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40011000 	.word	0x40011000
 8001888:	40011400 	.word	0x40011400
 800188c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	43db      	mvns	r3, r3
 8001898:	4909      	ldr	r1, [pc, #36]	; (80018c0 <HAL_GPIO_Init+0x304>)
 800189a:	4013      	ands	r3, r2
 800189c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f ae8e 	bne.w	80015d0 <HAL_GPIO_Init+0x14>
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	372c      	adds	r7, #44	; 0x2c
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e272      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8087 	beq.w	8001a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b04      	cmp	r3, #4
 800191e:	d00c      	beq.n	800193a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001920:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d112      	bne.n	8001952 <HAL_RCC_OscConfig+0x5e>
 800192c:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d10b      	bne.n	8001952 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d06c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x12c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d168      	bne.n	8001a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e24c      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x76>
 800195c:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e02e      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x98>
 8001972:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a77      	ldr	r2, [pc, #476]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e01d      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0xbc>
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a67      	ldr	r2, [pc, #412]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fd0a 	bl	80013e8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fd06 	bl	80013e8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e200      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe4>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fcf6 	bl	80013e8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fcf2 	bl	80013e8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1ec      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x10c>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d11c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x18c>
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d116      	bne.n	8001a80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x176>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e1c0      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4939      	ldr	r1, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	e03a      	b.n	8001af6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fcab 	bl	80013e8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff fca7 	bl	80013e8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1a1      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4927      	ldr	r1, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc8a 	bl	80013e8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc86 	bl	80013e8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e180      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03a      	beq.n	8001b78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d019      	beq.n	8001b3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff fc6a 	bl	80013e8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fc66 	bl	80013e8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e160      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f000 fb08 	bl	800214c <RCC_Delay>
 8001b3c:	e01c      	b.n	8001b78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fc50 	bl	80013e8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc4c 	bl	80013e8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e146      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	42420000 	.word	0x42420000
 8001b68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e9      	bne.n	8001b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a6 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a87      	ldr	r2, [pc, #540]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fc0d 	bl	80013e8 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff fc09 	bl	80013e8 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b64      	cmp	r3, #100	; 0x64
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e103      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x312>
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e02d      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x334>
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	e01c      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x356>
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a5d      	ldr	r2, [pc, #372]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d015      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fbbd 	bl	80013e8 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff fbb9 	bl	80013e8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0b1      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ee      	beq.n	8001c72 <HAL_RCC_OscConfig+0x37e>
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fba7 	bl	80013e8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff fba3 	bl	80013e8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e09b      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ee      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a3b      	ldr	r2, [pc, #236]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8087 	beq.w	8001dea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d061      	beq.n	8001dac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d146      	bne.n	8001d7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fb77 	bl	80013e8 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff fb73 	bl	80013e8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e06d      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4921      	ldr	r1, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a19      	ldr	r1, [r3, #32]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	491b      	ldr	r1, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fb47 	bl	80013e8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fb43 	bl	80013e8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e03d      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46a>
 8001d7c:	e035      	b.n	8001dea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb30 	bl	80013e8 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fb2c 	bl	80013e8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e026      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x498>
 8001daa:	e01e      	b.n	8001dea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e019      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x500>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0d0      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4965      	ldr	r1, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d040      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d115      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e073      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06b      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7ff fa7e 	bl	80013e8 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7ff fa7a 	bl	80013e8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e053      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d210      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 f821 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fc4c 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08008f6c 	.word	0x08008f6c
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b490      	push	{r4, r7}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fd4:	1d3c      	adds	r4, r7, #4
 8001fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fdc:	f240 2301 	movw	r3, #513	; 0x201
 8001fe0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x40>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x46>
 800200a:	e02b      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb4>)
 800200e:	623b      	str	r3, [r7, #32]
      break;
 8002010:	e02b      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3328      	adds	r3, #40	; 0x28
 800201c:	443b      	add	r3, r7
 800201e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002022:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0c5b      	lsrs	r3, r3, #17
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	3328      	adds	r3, #40	; 0x28
 800203a:	443b      	add	r3, r7
 800203c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002040:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	e004      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	623b      	str	r3, [r7, #32]
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002066:	623b      	str	r3, [r7, #32]
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	6a3b      	ldr	r3, [r7, #32]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bc90      	pop	{r4, r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	08008eb8 	.word	0x08008eb8
 800207c:	40021000 	.word	0x40021000
 8002080:	007a1200 	.word	0x007a1200
 8002084:	003d0900 	.word	0x003d0900

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b02      	ldr	r3, [pc, #8]	; (8002098 <HAL_RCC_GetHCLKFreq+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000000 	.word	0x20000000

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	f7ff fff2 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08008f7c 	.word	0x08008f7c

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c8:	f7ff ffde 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0adb      	lsrs	r3, r3, #11
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4903      	ldr	r1, [pc, #12]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08008f7c 	.word	0x08008f7c

080020ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	220f      	movs	r2, #15
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_GetClockConfig+0x58>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCC_GetClockConfig+0x58>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetClockConfig+0x58>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_RCC_GetClockConfig+0x58>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40022000 	.word	0x40022000

0800214c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <RCC_Delay+0x34>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <RCC_Delay+0x38>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002168:	bf00      	nop
  }
  while (Delay --);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	60fa      	str	r2, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <RCC_Delay+0x1c>
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e076      	b.n	8002288 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d108      	bne.n	80021b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021aa:	d009      	beq.n	80021c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
 80021b2:	e005      	b.n	80021c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fa34 	bl	8000648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	ea42 0103 	orr.w	r1, r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	0c1a      	lsrs	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f002 0204 	and.w	r2, r2, #4
 8002266:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800229e:	2301      	movs	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x26>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e18a      	b.n	80025cc <HAL_SPI_TransmitReceive+0x33c>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022be:	f7ff f893 	bl	80013e8 <HAL_GetTick>
 80022c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d00f      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x70>
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e6:	d107      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d103      	bne.n	80022f8 <HAL_SPI_TransmitReceive+0x68>
 80022f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d003      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022fe:	e15b      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_SPI_TransmitReceive+0x82>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_SPI_TransmitReceive+0x82>
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002318:	e14e      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b04      	cmp	r3, #4
 8002324:	d003      	beq.n	800232e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	887a      	ldrh	r2, [r7, #2]
 8002356:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d007      	beq.n	8002382 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800238a:	d178      	bne.n	800247e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_SPI_TransmitReceive+0x10a>
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d166      	bne.n	8002468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	1c9a      	adds	r2, r3, #2
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023be:	e053      	b.n	8002468 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d11b      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x176>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d016      	beq.n	8002406 <HAL_SPI_TransmitReceive+0x176>
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d113      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	1c9a      	adds	r2, r3, #2
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d119      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x1b8>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d014      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	b292      	uxth	r2, r2
 800242a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002444:	2301      	movs	r3, #1
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002448:	f7fe ffce 	bl	80013e8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002454:	429a      	cmp	r2, r3
 8002456:	d807      	bhi.n	8002468 <HAL_SPI_TransmitReceive+0x1d8>
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d003      	beq.n	8002468 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002466:	e0a7      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1a6      	bne.n	80023c0 <HAL_SPI_TransmitReceive+0x130>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1a1      	bne.n	80023c0 <HAL_SPI_TransmitReceive+0x130>
 800247c:	e07c      	b.n	8002578 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_SPI_TransmitReceive+0x1fc>
 8002486:	8b7b      	ldrh	r3, [r7, #26]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d16b      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b2:	e057      	b.n	8002564 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d11c      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x26c>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x26c>
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d114      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d119      	bne.n	800253e <HAL_SPI_TransmitReceive+0x2ae>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d014      	beq.n	800253e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800253a:	2301      	movs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800253e:	f7fe ff53 	bl	80013e8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800254a:	429a      	cmp	r2, r3
 800254c:	d803      	bhi.n	8002556 <HAL_SPI_TransmitReceive+0x2c6>
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d102      	bne.n	800255c <HAL_SPI_TransmitReceive+0x2cc>
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002562:	e029      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1a2      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x224>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d19d      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f8b1 	bl	80026e4 <SPI_EndRxTxTransaction>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002594:	e010      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10b      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	e000      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3730      	adds	r7, #48	; 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025e4:	f7fe ff00 	bl	80013e8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025f4:	f7fe fef8 	bl	80013e8 <HAL_GetTick>
 80025f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	015b      	lsls	r3, r3, #5
 8002600:	0d1b      	lsrs	r3, r3, #20
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260a:	e054      	b.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d050      	beq.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002614:	f7fe fee8 	bl	80013e8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	429a      	cmp	r2, r3
 8002622:	d902      	bls.n	800262a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13d      	bne.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002642:	d111      	bne.n	8002668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264c:	d004      	beq.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d107      	bne.n	8002668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	d10f      	bne.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e017      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d19b      	bne.n	800260c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000

080026e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ff6a 	bl	80025d4 <SPI_WaitFlagStateUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e000      	b.n	8002718 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd ffc8 	bl	80006dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fc72 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIM_Base_Start+0x88>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_TIM_Base_Start+0x48>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d009      	beq.n	8002808 <HAL_TIM_Base_Start+0x48>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIM_Base_Start+0x8c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_TIM_Base_Start+0x48>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_Base_Start+0x90>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d010      	beq.n	800283c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282a:	e007      	b.n	800283c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d001      	beq.n	800286c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e03a      	b.n	80028e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_TIM_Base_Start_IT+0x98>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x58>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d009      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x58>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x58>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d010      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	e007      	b.n	80028e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f839 	bl	8002996 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fb86 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_TIM_PWM_Start+0x24>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e022      	b.n	8002a12 <HAL_TIM_PWM_Start+0x6a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d109      	bne.n	80029e6 <HAL_TIM_PWM_Start+0x3e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	e015      	b.n	8002a12 <HAL_TIM_PWM_Start+0x6a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d109      	bne.n	8002a00 <HAL_TIM_PWM_Start+0x58>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e008      	b.n	8002a12 <HAL_TIM_PWM_Start+0x6a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e05e      	b.n	8002ad8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_PWM_Start+0x82>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	e013      	b.n	8002a52 <HAL_TIM_PWM_Start+0xaa>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_PWM_Start+0x92>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	e00b      	b.n	8002a52 <HAL_TIM_PWM_Start+0xaa>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_PWM_Start+0xa2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a48:	e003      	b.n	8002a52 <HAL_TIM_PWM_Start+0xaa>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd74 	bl	8003548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_TIM_PWM_Start+0x138>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d107      	bne.n	8002a7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_TIM_PWM_Start+0x138>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0xfa>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d009      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0xfa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_TIM_PWM_Start+0x13c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0xfa>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_TIM_PWM_Start+0x140>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d111      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d010      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	e007      	b.n	8002ad6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0202 	mvn.w	r2, #2
 8002b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa6f 	bl	8003012 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa62 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fa71 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0204 	mvn.w	r2, #4
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa45 	bl	8003012 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa38 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa47 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0208 	mvn.w	r2, #8
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa1b 	bl	8003012 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa0e 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa1d 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0210 	mvn.w	r2, #16
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9f1 	bl	8003012 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9e4 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f9f3 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0201 	mvn.w	r2, #1
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fc9c 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fce1 	bl	800365e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9b7 	bl	8003036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0220 	mvn.w	r2, #32
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fcac 	bl	800364c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0ac      	b.n	8002e70 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	f200 809f 	bhi.w	8002e64 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08002e65 	.word	0x08002e65
 8002d34:	08002e65 	.word	0x08002e65
 8002d38:	08002e65 	.word	0x08002e65
 8002d3c:	08002da1 	.word	0x08002da1
 8002d40:	08002e65 	.word	0x08002e65
 8002d44:	08002e65 	.word	0x08002e65
 8002d48:	08002e65 	.word	0x08002e65
 8002d4c:	08002de3 	.word	0x08002de3
 8002d50:	08002e65 	.word	0x08002e65
 8002d54:	08002e65 	.word	0x08002e65
 8002d58:	08002e65 	.word	0x08002e65
 8002d5c:	08002e23 	.word	0x08002e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f9d0 	bl	800310c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0208 	orr.w	r2, r2, #8
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0204 	bic.w	r2, r2, #4
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	619a      	str	r2, [r3, #24]
      break;
 8002d9e:	e062      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fa16 	bl	80031d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6999      	ldr	r1, [r3, #24]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	619a      	str	r2, [r3, #24]
      break;
 8002de0:	e041      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fa5f 	bl	80032ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0208 	orr.w	r2, r2, #8
 8002dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0204 	bic.w	r2, r2, #4
 8002e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	61da      	str	r2, [r3, #28]
      break;
 8002e20:	e021      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 faa9 	bl	8003380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69d9      	ldr	r1, [r3, #28]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	61da      	str	r2, [r3, #28]
      break;
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_ConfigClockSource+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0b3      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x180>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d03e      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xd0>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	f200 8087 	bhi.w	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	f000 8085 	beq.w	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ede:	d87f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d01a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xa2>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d87b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d050      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x116>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d877      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d03c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xf6>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d873      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d058      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x136>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d064      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d86b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d060      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d867      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d05a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f18:	e062      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f000 faee 	bl	800350a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e04e      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f000 fad7 	bl	800350a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e03b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 fa4e 	bl	800341c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2150      	movs	r1, #80	; 0x50
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 faa5 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e02b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 fa6c 	bl	8003478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2160      	movs	r1, #96	; 0x60
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa95 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002fac:	e01b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 fa2e 	bl	800341c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	; 0x40
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa85 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e00b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 fa7c 	bl	80034d6 <TIM_ITRx_SetConfig>
        break;
 8002fde:	e002      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <TIM_Base_SetConfig+0xbc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a25      	ldr	r2, [pc, #148]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <TIM_Base_SetConfig+0xbc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d103      	bne.n	80030f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	615a      	str	r2, [r3, #20]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800

0800310c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f023 0302 	bic.w	r3, r3, #2
 8003154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <TIM_OC1_SetConfig+0xc8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10c      	bne.n	8003182 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0308 	bic.w	r3, r3, #8
 800316e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <TIM_OC1_SetConfig+0xc8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d111      	bne.n	80031ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	621a      	str	r2, [r3, #32]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0210 	bic.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0320 	bic.w	r3, r3, #32
 8003222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <TIM_OC2_SetConfig+0xd0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10d      	bne.n	8003254 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <TIM_OC2_SetConfig+0xd0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d113      	bne.n	8003284 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40012c00 	.word	0x40012c00

080032ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <TIM_OC3_SetConfig+0xd0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10d      	bne.n	8003326 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <TIM_OC3_SetConfig+0xd0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d113      	bne.n	8003356 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40012c00 	.word	0x40012c00

08003380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	031b      	lsls	r3, r3, #12
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <TIM_OC4_SetConfig+0x98>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d109      	bne.n	80033f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00

0800341c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0201 	bic.w	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 030a 	bic.w	r3, r3, #10
 8003458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0210 	bic.w	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	031b      	lsls	r3, r3, #12
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f043 0307 	orr.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800350a:	b480      	push	{r7}
 800350c:	b087      	sub	sp, #28
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003524:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	021a      	lsls	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	431a      	orrs	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4313      	orrs	r3, r2
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	609a      	str	r2, [r3, #8]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2201      	movs	r2, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e046      	b.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d009      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10c      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800

0800364c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e03f      	b.n	8003702 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd f888 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f829 	bl	800370c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003746:	f023 030c 	bic.w	r3, r3, #12
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	430b      	orrs	r3, r1
 8003752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <UART_SetConfig+0x114>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d103      	bne.n	800377c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe fca6 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	e002      	b.n	8003782 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7fe fc8e 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003780:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	4a22      	ldr	r2, [pc, #136]	; (8003824 <UART_SetConfig+0x118>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	0119      	lsls	r1, r3, #4
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <UART_SetConfig+0x118>)
 80037ba:	fba3 0302 	umull	r0, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2064      	movs	r0, #100	; 0x64
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	3332      	adds	r3, #50	; 0x32
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <UART_SetConfig+0x118>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	4419      	add	r1, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <UART_SetConfig+0x118>)
 80037f2:	fba3 0302 	umull	r0, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2064      	movs	r0, #100	; 0x64
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	440a      	add	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40013800 	.word	0x40013800
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <MX_FATFS_Init+0x18>)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_FATFS_Init+0x1c>)
 8003830:	f002 fb5e 	bl	8005ef0 <FATFS_LinkDriver>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <MX_FATFS_Init+0x20>)
 800383a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200006a0 	.word	0x200006a0
 8003844:	20000010 	.word	0x20000010
 8003848:	2000069c 	.word	0x2000069c

0800384c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
	...

0800385c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <USER_initialize+0x24>)
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fa1c 	bl	8000cac <USER_SPI_initialize>
 8003874:	4603      	mov	r3, r0
   // return Stat;
  /* USER CODE END INIT */
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000000d 	.word	0x2000000d

08003884 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <USER_status+0x24>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv); //ADD THIS LINE
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd faf2 	bl	8000e80 <USER_SPI_status>
 800389c:	4603      	mov	r3, r0
    //return Stat;
  /* USER CODE END STATUS */
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000000d 	.word	0x2000000d

080038ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4603      	mov	r3, r0
 80038ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv,buff,sector,count); //ADD THIS LINE
 80038bc:	7bf8      	ldrb	r0, [r7, #15]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	f7fd faf0 	bl	8000ea8 <USER_SPI_read>
 80038c8:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4603      	mov	r3, r0
 80038e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv,buff,sector,count); //ADD THIS LINE
 80038e2:	7bf8      	ldrb	r0, [r7, #15]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	f7fd fb43 	bl	8000f74 <USER_SPI_write>
 80038ee:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	603a      	str	r2, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	460b      	mov	r3, r1
 8003906:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv,cmd,buff); //ADD THIS LINE
 800390c:	79b9      	ldrb	r1, [r7, #6]
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fbaa 	bl	800106c <USER_SPI_ioctl>
 8003918:	4603      	mov	r3, r0
    //return res;
  /* USER CODE END IOCTL */
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <disk_status+0x30>)
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	79fa      	ldrb	r2, [r7, #7]
 800393c:	4905      	ldr	r1, [pc, #20]	; (8003954 <disk_status+0x30>)
 800393e:	440a      	add	r2, r1
 8003940:	7a12      	ldrb	r2, [r2, #8]
 8003942:	4610      	mov	r0, r2
 8003944:	4798      	blx	r3
 8003946:	4603      	mov	r3, r0
 8003948:	73fb      	strb	r3, [r7, #15]
  return stat;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200006c4 	.word	0x200006c4

08003958 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <disk_initialize+0x48>)
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <disk_initialize+0x48>)
 8003974:	2101      	movs	r1, #1
 8003976:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <disk_initialize+0x48>)
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	4906      	ldr	r1, [pc, #24]	; (80039a0 <disk_initialize+0x48>)
 8003988:	440a      	add	r2, r1
 800398a:	7a12      	ldrb	r2, [r2, #8]
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200006c4 	.word	0x200006c4

080039a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <disk_read+0x3c>)
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	689c      	ldr	r4, [r3, #8]
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <disk_read+0x3c>)
 80039c4:	4413      	add	r3, r2
 80039c6:	7a18      	ldrb	r0, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	47a0      	blx	r4
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	bf00      	nop
 80039e0:	200006c4 	.word	0x200006c4

080039e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <disk_write+0x3c>)
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68dc      	ldr	r4, [r3, #12]
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <disk_write+0x3c>)
 8003a04:	4413      	add	r3, r2
 8003a06:	7a18      	ldrb	r0, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	47a0      	blx	r4
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200006c4 	.word	0x200006c4

08003a24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003a38:	e007      	b.n	8003a4a <mem_cpy+0x26>
		*d++ = *s++;
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	1c53      	adds	r3, r2, #1
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	6179      	str	r1, [r7, #20]
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f2      	bne.n	8003a3a <mem_cpy+0x16>
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003a70:	e005      	b.n	8003a7e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	617a      	str	r2, [r7, #20]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f4      	bne.n	8003a72 <mem_set+0x12>
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003aac:	bf00      	nop
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <mem_cmp+0x40>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	61ba      	str	r2, [r7, #24]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	1acb      	subs	r3, r1, r3
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ec      	beq.n	8003aae <mem_cmp+0x1a>
	return r;
 8003ad4:	697b      	ldr	r3, [r7, #20]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003aea:	e002      	b.n	8003af2 <chk_chr+0x12>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3301      	adds	r3, #1
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <chk_chr+0x26>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d1f2      	bne.n	8003aec <chk_chr+0xc>
	return *str;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fa13 	bl	8005f4e <ff_req_grant>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <unlock_fs+0x36>
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d00e      	beq.n	8003b68 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	2b0b      	cmp	r3, #11
 8003b4e:	d00b      	beq.n	8003b68 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d008      	beq.n	8003b68 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	2b0f      	cmp	r3, #15
 8003b5a:	d005      	beq.n	8003b68 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fa01 	bl	8005f6a <ff_rel_grant>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e038      	b.n	8003bf6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003b84:	492f      	ldr	r1, [pc, #188]	; (8003c44 <chk_lock+0xd4>)
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d029      	beq.n	8003bec <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003b98:	492a      	ldr	r1, [pc, #168]	; (8003c44 <chk_lock+0xd4>)
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11e      	bne.n	8003bf0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003bb2:	4924      	ldr	r1, [pc, #144]	; (8003c44 <chk_lock+0xd4>)
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d110      	bne.n	8003bf0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003bce:	491d      	ldr	r1, [pc, #116]	; (8003c44 <chk_lock+0xd4>)
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3308      	adds	r3, #8
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d102      	bne.n	8003bf0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003bea:	e007      	b.n	8003bfc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003bec:	2301      	movs	r3, #1
 8003bee:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d9c3      	bls.n	8003b84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d109      	bne.n	8003c16 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <chk_lock+0x9e>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d101      	bne.n	8003c12 <chk_lock+0xa2>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e013      	b.n	8003c3a <chk_lock+0xca>
 8003c12:	2312      	movs	r3, #18
 8003c14:	e011      	b.n	8003c3a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <chk_lock+0xc4>
 8003c1c:	4909      	ldr	r1, [pc, #36]	; (8003c44 <chk_lock+0xd4>)
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	330a      	adds	r3, #10
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d101      	bne.n	8003c38 <chk_lock+0xc8>
 8003c34:	2310      	movs	r3, #16
 8003c36:	e000      	b.n	8003c3a <chk_lock+0xca>
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	200006ac 	.word	0x200006ac

08003c48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e002      	b.n	8003c5a <enq_lock+0x12>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d809      	bhi.n	8003c74 <enq_lock+0x2c>
 8003c60:	490a      	ldr	r1, [pc, #40]	; (8003c8c <enq_lock+0x44>)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ef      	bne.n	8003c54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	200006ac 	.word	0x200006ac

08003c90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e02b      	b.n	8003cf8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003ca0:	4955      	ldr	r1, [pc, #340]	; (8003df8 <inc_lock+0x168>)
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11b      	bne.n	8003cf2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8003cba:	494f      	ldr	r1, [pc, #316]	; (8003df8 <inc_lock+0x168>)
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3304      	adds	r3, #4
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d10d      	bne.n	8003cf2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8003cd6:	4948      	ldr	r1, [pc, #288]	; (8003df8 <inc_lock+0x168>)
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d006      	beq.n	8003d00 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d9d0      	bls.n	8003ca0 <inc_lock+0x10>
 8003cfe:	e000      	b.n	8003d02 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003d00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d145      	bne.n	8003d94 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e002      	b.n	8003d14 <inc_lock+0x84>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d809      	bhi.n	8003d2e <inc_lock+0x9e>
 8003d1a:	4937      	ldr	r1, [pc, #220]	; (8003df8 <inc_lock+0x168>)
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ef      	bne.n	8003d0e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d101      	bne.n	8003d38 <inc_lock+0xa8>
 8003d34:	2300      	movs	r3, #0
 8003d36:	e05a      	b.n	8003dee <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003d3e:	482e      	ldr	r0, [pc, #184]	; (8003df8 <inc_lock+0x168>)
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4403      	add	r3, r0
 8003d4c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003d54:	4828      	ldr	r0, [pc, #160]	; (8003df8 <inc_lock+0x168>)
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4403      	add	r3, r0
 8003d62:	3304      	adds	r3, #4
 8003d64:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003d6c:	4922      	ldr	r1, [pc, #136]	; (8003df8 <inc_lock+0x168>)
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d80:	491d      	ldr	r1, [pc, #116]	; (8003df8 <inc_lock+0x168>)
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	330a      	adds	r3, #10
 8003d90:	2200      	movs	r2, #0
 8003d92:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <inc_lock+0x124>
 8003d9a:	4917      	ldr	r1, [pc, #92]	; (8003df8 <inc_lock+0x168>)
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	330a      	adds	r3, #10
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <inc_lock+0x124>
 8003db0:	2300      	movs	r3, #0
 8003db2:	e01c      	b.n	8003dee <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <inc_lock+0x142>
 8003dba:	490f      	ldr	r1, [pc, #60]	; (8003df8 <inc_lock+0x168>)
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	330a      	adds	r3, #10
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	e001      	b.n	8003dd6 <inc_lock+0x146>
 8003dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dd6:	4808      	ldr	r0, [pc, #32]	; (8003df8 <inc_lock+0x168>)
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4403      	add	r3, r0
 8003de4:	330a      	adds	r3, #10
 8003de6:	460a      	mov	r2, r1
 8003de8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	200006ac 	.word	0x200006ac

08003dfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e016      	b.n	8003e38 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e0a:	4910      	ldr	r1, [pc, #64]	; (8003e4c <clear_lock+0x50>)
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d108      	bne.n	8003e32 <clear_lock+0x36>
 8003e20:	490a      	ldr	r1, [pc, #40]	; (8003e4c <clear_lock+0x50>)
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d9e5      	bls.n	8003e0a <clear_lock+0xe>
	}
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	200006ac 	.word	0x200006ac

08003e50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d038      	beq.n	8003ed8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003e6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	2301      	movs	r3, #1
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	f7ff fdb3 	bl	80039e4 <disk_write>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e026      	b.n	8003ed8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d218      	bcs.n	8003ed8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e010      	b.n	8003ed2 <sync_window+0x82>
					wsect += fs->fsize;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4413      	add	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	f7ff fd8c 	bl	80039e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d8eb      	bhi.n	8003eb0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d01b      	beq.n	8003f34 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ffa7 	bl	8003e50 <sync_window>
 8003f02:	4603      	mov	r3, r0
 8003f04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d113      	bne.n	8003f34 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	2301      	movs	r3, #1
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	f7ff fd44 	bl	80039a4 <disk_read>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3b02      	subs	r3, #2
 8003f4c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f54:	3b02      	subs	r3, #2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d301      	bcc.n	8003f60 <clust2sect+0x22>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e00a      	b.n	8003f76 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003f66:	461a      	mov	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	fb03 f202 	mul.w	r2, r3, r2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003f74:	4413      	add	r3, r2
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d905      	bls.n	8003f9c <get_fat+0x1c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	e0a3      	b.n	80040ea <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d068      	beq.n	8004084 <get_fat+0x104>
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	f300 808f 	bgt.w	80040d6 <get_fat+0x156>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <get_fat+0x42>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d040      	beq.n	8004042 <get_fat+0xc2>
 8003fc0:	e089      	b.n	80040d6 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0a5b      	lsrs	r3, r3, #9
 8003fda:	4413      	add	r3, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ff7f 	bl	8003ee2 <move_window>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d178      	bne.n	80040dc <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	60fa      	str	r2, [r7, #12]
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0a5b      	lsrs	r3, r3, #9
 8004004:	4413      	add	r3, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff6a 	bl	8003ee2 <move_window>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d165      	bne.n	80040e0 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <get_fat+0xb8>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	e002      	b.n	800403e <get_fat+0xbe>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	617b      	str	r3, [r7, #20]
			break;
 8004040:	e053      	b.n	80040ea <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	4413      	add	r3, r2
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff46 	bl	8003ee2 <move_window>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d143      	bne.n	80040e4 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3301      	adds	r3, #1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	b21a      	sxth	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b21b      	sxth	r3, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	b21b      	sxth	r3, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	617b      	str	r3, [r7, #20]
			break;
 8004082:	e032      	b.n	80040ea <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	09db      	lsrs	r3, r3, #7
 800408e:	4413      	add	r3, r2
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ff25 	bl	8003ee2 <move_window>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d124      	bne.n	80040e8 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3303      	adds	r3, #3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	061a      	lsls	r2, r3, #24
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3302      	adds	r3, #2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	4313      	orrs	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	3201      	adds	r2, #1
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	0212      	lsls	r2, r2, #8
 80040c6:	4313      	orrs	r3, r2
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040d2:	617b      	str	r3, [r7, #20]
			break;
 80040d4:	e009      	b.n	80040ea <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80040d6:	2301      	movs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e006      	b.n	80040ea <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040dc:	bf00      	nop
 80040de:	e004      	b.n	80040ea <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040e8:	bf00      	nop
		}
	}

	return val;
 80040ea:	697b      	ldr	r3, [r7, #20]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d905      	bls.n	8004112 <put_fat+0x1e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <put_fat+0x24>
		res = FR_INT_ERR;
 8004112:	2302      	movs	r3, #2
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0f6      	b.n	8004306 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800411e:	2b03      	cmp	r3, #3
 8004120:	f000 809e 	beq.w	8004260 <put_fat+0x16c>
 8004124:	2b03      	cmp	r3, #3
 8004126:	f300 80e4 	bgt.w	80042f2 <put_fat+0x1fe>
 800412a:	2b01      	cmp	r3, #1
 800412c:	d002      	beq.n	8004134 <put_fat+0x40>
 800412e:	2b02      	cmp	r3, #2
 8004130:	d06f      	beq.n	8004212 <put_fat+0x11e>
 8004132:	e0de      	b.n	80042f2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	4413      	add	r3, r2
 800414e:	4619      	mov	r1, r3
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fec6 	bl	8003ee2 <move_window>
 8004156:	4603      	mov	r3, r0
 8004158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 80cb 	bne.w	80042f8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	617a      	str	r2, [r7, #20]
 8004168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <put_fat+0xa4>
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	b25a      	sxtb	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	b25b      	sxtb	r3, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	b25b      	sxtb	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e001      	b.n	800419c <put_fat+0xa8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	0a5b      	lsrs	r3, r3, #9
 80041b2:	4413      	add	r3, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff fe93 	bl	8003ee2 <move_window>
 80041bc:	4603      	mov	r3, r0
 80041be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041c0:	7ffb      	ldrb	r3, [r7, #31]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 809a 	bne.w	80042fc <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <put_fat+0xf2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e00e      	b.n	8004204 <put_fat+0x110>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f023 030f 	bic.w	r3, r3, #15
 80041f0:	b25a      	sxtb	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b25b      	sxtb	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004210:	e079      	b.n	8004306 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	4413      	add	r3, r2
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe5e 	bl	8003ee2 <move_window>
 8004226:	4603      	mov	r3, r0
 8004228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d167      	bne.n	8004300 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	b29b      	uxth	r3, r3
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	b29a      	uxth	r2, r3
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3301      	adds	r3, #1
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800425e:	e052      	b.n	8004306 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	09db      	lsrs	r3, r3, #7
 800426a:	4413      	add	r3, r2
 800426c:	4619      	mov	r1, r3
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fe37 	bl	8003ee2 <move_window>
 8004274:	4603      	mov	r3, r0
 8004276:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d142      	bne.n	8004304 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	3303      	adds	r3, #3
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	061a      	lsls	r2, r3, #24
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3302      	adds	r3, #2
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	4313      	orrs	r3, r2
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	3201      	adds	r2, #1
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	0212      	lsls	r2, r2, #8
 80042a6:	4313      	orrs	r3, r2
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	3301      	adds	r3, #1
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0c1a      	lsrs	r2, r3, #16
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	3302      	adds	r3, #2
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0e1a      	lsrs	r2, r3, #24
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	3303      	adds	r3, #3
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80042f0:	e009      	b.n	8004306 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e006      	b.n	8004306 <put_fat+0x212>
			if (res != FR_OK) break;
 80042f8:	bf00      	nop
 80042fa:	e004      	b.n	8004306 <put_fat+0x212>
			if (res != FR_OK) break;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <put_fat+0x212>
			if (res != FR_OK) break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <put_fat+0x212>
			if (res != FR_OK) break;
 8004304:	bf00      	nop
		}
	}

	return res;
 8004306:	7ffb      	ldrb	r3, [r7, #31]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d905      	bls.n	800432c <remove_chain+0x1c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <remove_chain+0x22>
		res = FR_INT_ERR;
 800432c:	2302      	movs	r3, #2
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e043      	b.n	80043ba <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004336:	e036      	b.n	80043a6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fe20 	bl	8003f80 <get_fat>
 8004340:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d035      	beq.n	80043b4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <remove_chain+0x44>
 800434e:	2302      	movs	r3, #2
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	e032      	b.n	80043ba <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d102      	bne.n	8004362 <remove_chain+0x52>
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e02b      	b.n	80043ba <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004362:	2200      	movs	r2, #0
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fec4 	bl	80040f4 <put_fat>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d120      	bne.n	80043b8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d00f      	beq.n	80043a2 <remove_chain+0x92>
				fs->free_clust++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3c2      	bcc.n	8004338 <remove_chain+0x28>
 80043b2:	e002      	b.n	80043ba <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <remove_chain+0xaa>
			if (res != FR_OK) break;
 80043b8:	bf00      	nop
		}
	}

	return res;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80043da:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <create_chain+0x2a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d31c      	bcc.n	8004428 <create_chain+0x64>
 80043ee:	2301      	movs	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e019      	b.n	8004428 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fdc2 	bl	8003f80 <get_fat>
 80043fc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d801      	bhi.n	8004408 <create_chain+0x44>
 8004404:	2301      	movs	r3, #1
 8004406:	e076      	b.n	80044f6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <create_chain+0x50>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	e070      	b.n	80044f6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d201      	bcs.n	8004424 <create_chain+0x60>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	e068      	b.n	80044f6 <create_chain+0x132>
		scl = clst;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d307      	bcc.n	800444e <create_chain+0x8a>
			ncl = 2;
 800443e:	2302      	movs	r3, #2
 8004440:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d901      	bls.n	800444e <create_chain+0x8a>
 800444a:	2300      	movs	r3, #0
 800444c:	e053      	b.n	80044f6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800444e:	6979      	ldr	r1, [r7, #20]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fd95 	bl	8003f80 <get_fat>
 8004456:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d002      	beq.n	800446c <create_chain+0xa8>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <create_chain+0xac>
			return cs;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	e042      	b.n	80044f6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d1d9      	bne.n	800442c <create_chain+0x68>
 8004478:	2300      	movs	r3, #0
 800447a:	e03c      	b.n	80044f6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800447c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800447e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004482:	6979      	ldr	r1, [r7, #20]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fe35 	bl	80040f4 <put_fat>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <create_chain+0xe4>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fe28 	bl	80040f4 <put_fat>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11a      	bne.n	80044e4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d018      	beq.n	80044f4 <create_chain+0x130>
			fs->free_clust--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80044e2:	e007      	b.n	80044f4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <create_chain+0x12c>
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	e000      	b.n	80044f2 <create_chain+0x12e>
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800450e:	3304      	adds	r3, #4
 8004510:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800451c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004520:	fbb3 f3f2 	udiv	r3, r3, r2
 8004524:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1d1a      	adds	r2, r3, #4
 800452a:	613a      	str	r2, [r7, #16]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <clmt_clust+0x3c>
 8004536:	2300      	movs	r3, #0
 8004538:	e010      	b.n	800455c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	d307      	bcc.n	8004552 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004550:	e7e9      	b.n	8004526 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004552:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4413      	add	r3, r2
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004580:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d007      	beq.n	8004598 <dir_sdi+0x32>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800458e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d301      	bcc.n	800459c <dir_sdi+0x36>
		return FR_INT_ERR;
 8004598:	2302      	movs	r3, #2
 800459a:	e074      	b.n	8004686 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <dir_sdi+0x56>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d105      	bne.n	80045bc <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045b6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80045ba:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d111      	bne.n	80045e6 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045c8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80045cc:	461a      	mov	r2, r3
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d301      	bcc.n	80045d8 <dir_sdi+0x72>
			return FR_INT_ERR;
 80045d4:	2302      	movs	r3, #2
 80045d6:	e056      	b.n	8004686 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045de:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e032      	b.n	800464c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80045f4:	e01e      	b.n	8004634 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fcbe 	bl	8003f80 <get_fat>
 8004604:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d101      	bne.n	8004612 <dir_sdi+0xac>
 800460e:	2301      	movs	r3, #1
 8004610:	e039      	b.n	8004686 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d907      	bls.n	8004628 <dir_sdi+0xc2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800461e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	d301      	bcc.n	800462c <dir_sdi+0xc6>
				return FR_INT_ERR;
 8004628:	2302      	movs	r3, #2
 800462a:	e02c      	b.n	8004686 <dir_sdi+0x120>
			idx -= ic;
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	429a      	cmp	r2, r3
 800463a:	d2dc      	bcs.n	80045f6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fc7a 	bl	8003f3e <clust2sect>
 800464a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <dir_sdi+0xf8>
 800465a:	2302      	movs	r3, #2
 800465c:	e013      	b.n	8004686 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	091a      	lsrs	r2, r3, #4
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004672:	461a      	mov	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	015b      	lsls	r3, r3, #5
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800468e:	b590      	push	{r4, r7, lr}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <dir_next+0x26>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <dir_next+0x2a>
		return FR_NO_FILE;
 80046b4:	2304      	movs	r3, #4
 80046b6:	e0dd      	b.n	8004874 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 80c6 	bne.w	8004850 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	f0c0 80b0 	bcc.w	8004850 <dir_next+0x1c2>
				return FR_NO_FILE;
 80046f0:	2304      	movs	r3, #4
 80046f2:	e0bf      	b.n	8004874 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80046fe:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004702:	3a01      	subs	r2, #1
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 80a2 	bne.w	8004850 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7ff fc30 	bl	8003f80 <get_fat>
 8004720:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d801      	bhi.n	800472c <dir_next+0x9e>
 8004728:	2302      	movs	r3, #2
 800472a:	e0a3      	b.n	8004874 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d101      	bne.n	8004738 <dir_next+0xaa>
 8004734:	2301      	movs	r3, #1
 8004736:	e09d      	b.n	8004874 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800473e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d374      	bcc.n	8004832 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <dir_next+0xc4>
 800474e:	2304      	movs	r3, #4
 8004750:	e090      	b.n	8004874 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7ff fe2f 	bl	80043c4 <create_chain>
 8004766:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <dir_next+0xe4>
 800476e:	2307      	movs	r3, #7
 8004770:	e080      	b.n	8004874 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <dir_next+0xee>
 8004778:	2302      	movs	r3, #2
 800477a:	e07b      	b.n	8004874 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d101      	bne.n	8004788 <dir_next+0xfa>
 8004784:	2301      	movs	r3, #1
 8004786:	e075      	b.n	8004874 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fb5e 	bl	8003e50 <sync_window>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <dir_next+0x110>
 800479a:	2301      	movs	r3, #1
 800479c:	e06a      	b.n	8004874 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f958 	bl	8003a60 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	4610      	mov	r0, r2
 80047c0:	f7ff fbbd 	bl	8003f3e <clust2sect>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e01b      	b.n	8004808 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fb34 	bl	8003e50 <sync_window>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <dir_next+0x164>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e040      	b.n	8004874 <dir_next+0x1e6>
						dp->fs->winsect++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047f8:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80047fc:	3201      	adds	r2, #1
 80047fe:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3301      	adds	r3, #1
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800480e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004812:	461a      	mov	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4293      	cmp	r3, r2
 8004818:	d3da      	bcc.n	80047d0 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004820:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	1a8a      	subs	r2, r1, r2
 800482e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fb7b 	bl	8003f3e <clust2sect>
 8004848:	4602      	mov	r2, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	015b      	lsls	r3, r3, #5
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}

0800487c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004886:	2100      	movs	r1, #0
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fe6c 	bl	8004566 <dir_sdi>
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d131      	bne.n	80048fc <dir_alloc+0x80>
		n = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7ff fb19 	bl	8003ee2 <move_window>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11f      	bne.n	80048fa <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2be5      	cmp	r3, #229	; 0xe5
 80048c4:	d005      	beq.n	80048d2 <dir_alloc+0x56>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d102      	bne.n	80048e6 <dir_alloc+0x6a>
 80048e0:	e00c      	b.n	80048fc <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80048e6:	2101      	movs	r1, #1
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fed0 	bl	800468e <dir_next>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0d1      	beq.n	800489c <dir_alloc+0x20>
 80048f8:	e000      	b.n	80048fc <dir_alloc+0x80>
			if (res != FR_OK) break;
 80048fa:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d101      	bne.n	8004906 <dir_alloc+0x8a>
 8004902:	2307      	movs	r3, #7
 8004904:	73fb      	strb	r3, [r7, #15]
	return res;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	331b      	adds	r3, #27
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	b21a      	sxth	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	331a      	adds	r3, #26
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b21b      	sxth	r3, r3
 800492c:	4313      	orrs	r3, r2
 800492e:	b21b      	sxth	r3, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800493a:	2b03      	cmp	r3, #3
 800493c:	d10f      	bne.n	800495e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3315      	adds	r3, #21
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	b21a      	sxth	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b21b      	sxth	r3, r3
 8004950:	4313      	orrs	r3, r2
 8004952:	b21b      	sxth	r3, r3
 8004954:	b29b      	uxth	r3, r3
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

	return cl;
 800495e:	68fb      	ldr	r3, [r7, #12]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	331a      	adds	r3, #26
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	331b      	adds	r3, #27
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	0c1a      	lsrs	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3314      	adds	r3, #20
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	b29b      	uxth	r3, r3
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3315      	adds	r3, #21
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80049be:	2100      	movs	r1, #0
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fdd0 	bl	8004566 <dir_sdi>
 80049c6:	4603      	mov	r3, r0
 80049c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <dir_find+0x1e>
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	e03b      	b.n	8004a4c <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f7ff fa7d 	bl	8003ee2 <move_window>
 80049e8:	4603      	mov	r3, r0
 80049ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d128      	bne.n	8004a44 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049f8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <dir_find+0x56>
 8004a06:	2304      	movs	r3, #4
 8004a08:	75fb      	strb	r3, [r7, #23]
 8004a0a:	e01e      	b.n	8004a4a <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	330b      	adds	r3, #11
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <dir_find+0x7a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004a20:	220b      	movs	r2, #11
 8004a22:	4619      	mov	r1, r3
 8004a24:	6938      	ldr	r0, [r7, #16]
 8004a26:	f7ff f835 	bl	8003a94 <mem_cmp>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004a30:	2100      	movs	r1, #0
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fe2b 	bl	800468e <dir_next>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0c8      	beq.n	80049d4 <dir_find+0x1e>
 8004a42:	e002      	b.n	8004a4a <dir_find+0x94>
		if (res != FR_OK) break;
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <dir_find+0x94>
			break;
 8004a48:	bf00      	nop

	return res;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff0c 	bl	800487c <dir_alloc>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d126      	bne.n	8004abc <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7ff fa30 	bl	8003ee2 <move_window>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d117      	bne.n	8004abc <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a92:	2220      	movs	r2, #32
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe ffe2 	bl	8003a60 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004aa8:	220b      	movs	r2, #11
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fe ffba 	bl	8003a24 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <create_name+0x18>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ae6:	d0f8      	beq.n	8004ada <create_name+0x12>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b5c      	cmp	r3, #92	; 0x5c
 8004aee:	d0f4      	beq.n	8004ada <create_name+0x12>
	sfn = dp->fn;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004af6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004af8:	220b      	movs	r2, #11
 8004afa:	2120      	movs	r1, #32
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f7fe ffaf 	bl	8003a60 <mem_set>
	si = i = b = 0; ni = 8;
 8004b02:	2300      	movs	r3, #0
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2308      	movs	r3, #8
 8004b10:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	617a      	str	r2, [r7, #20]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004b20:	7fbb      	ldrb	r3, [r7, #30]
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d953      	bls.n	8004bce <create_name+0x106>
 8004b26:	7fbb      	ldrb	r3, [r7, #30]
 8004b28:	2b2f      	cmp	r3, #47	; 0x2f
 8004b2a:	d050      	beq.n	8004bce <create_name+0x106>
 8004b2c:	7fbb      	ldrb	r3, [r7, #30]
 8004b2e:	2b5c      	cmp	r3, #92	; 0x5c
 8004b30:	d04d      	beq.n	8004bce <create_name+0x106>
		if (c == '.' || i >= ni) {
 8004b32:	7fbb      	ldrb	r3, [r7, #30]
 8004b34:	2b2e      	cmp	r3, #46	; 0x2e
 8004b36:	d003      	beq.n	8004b40 <create_name+0x78>
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d30f      	bcc.n	8004b60 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d102      	bne.n	8004b4c <create_name+0x84>
 8004b46:	7fbb      	ldrb	r3, [r7, #30]
 8004b48:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4a:	d001      	beq.n	8004b50 <create_name+0x88>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	e073      	b.n	8004c38 <create_name+0x170>
			i = 8; ni = 11;
 8004b50:	2308      	movs	r3, #8
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	230b      	movs	r3, #11
 8004b56:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004b58:	7ffb      	ldrb	r3, [r7, #31]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e035      	b.n	8004bcc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004b60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	da08      	bge.n	8004b7a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004b68:	7ffb      	ldrb	r3, [r7, #31]
 8004b6a:	f043 0303 	orr.w	r3, r3, #3
 8004b6e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004b70:	7fbb      	ldrb	r3, [r7, #30]
 8004b72:	3b80      	subs	r3, #128	; 0x80
 8004b74:	4a32      	ldr	r2, [pc, #200]	; (8004c40 <create_name+0x178>)
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004b7a:	7fbb      	ldrb	r3, [r7, #30]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4831      	ldr	r0, [pc, #196]	; (8004c44 <create_name+0x17c>)
 8004b80:	f7fe ffae 	bl	8003ae0 <chk_chr>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <create_name+0xc6>
				return FR_INVALID_NAME;
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	e054      	b.n	8004c38 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004b8e:	7fbb      	ldrb	r3, [r7, #30]
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d907      	bls.n	8004ba4 <create_name+0xdc>
 8004b94:	7fbb      	ldrb	r3, [r7, #30]
 8004b96:	2b5a      	cmp	r3, #90	; 0x5a
 8004b98:	d804      	bhi.n	8004ba4 <create_name+0xdc>
				b |= 2;
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e00c      	b.n	8004bbe <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
 8004ba6:	2b60      	cmp	r3, #96	; 0x60
 8004ba8:	d909      	bls.n	8004bbe <create_name+0xf6>
 8004baa:	7fbb      	ldrb	r3, [r7, #30]
 8004bac:	2b7a      	cmp	r3, #122	; 0x7a
 8004bae:	d806      	bhi.n	8004bbe <create_name+0xf6>
					b |= 1; c -= 0x20;
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	7fbb      	ldrb	r3, [r7, #30]
 8004bba:	3b20      	subs	r3, #32
 8004bbc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	613a      	str	r2, [r7, #16]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	7fba      	ldrb	r2, [r7, #30]
 8004bca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004bcc:	e7a1      	b.n	8004b12 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004bd8:	7fbb      	ldrb	r3, [r7, #30]
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d801      	bhi.n	8004be2 <create_name+0x11a>
 8004bde:	2304      	movs	r3, #4
 8004be0:	e000      	b.n	8004be4 <create_name+0x11c>
 8004be2:	2300      	movs	r3, #0
 8004be4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <create_name+0x128>
 8004bec:	2306      	movs	r3, #6
 8004bee:	e023      	b.n	8004c38 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2be5      	cmp	r3, #229	; 0xe5
 8004bf6:	d102      	bne.n	8004bfe <create_name+0x136>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d102      	bne.n	8004c0a <create_name+0x142>
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d103      	bne.n	8004c1c <create_name+0x154>
 8004c14:	7fbb      	ldrb	r3, [r7, #30]
 8004c16:	f043 0310 	orr.w	r3, r3, #16
 8004c1a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d103      	bne.n	8004c2e <create_name+0x166>
 8004c26:	7fbb      	ldrb	r3, [r7, #30]
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	330b      	adds	r3, #11
 8004c32:	7fba      	ldrb	r2, [r7, #30]
 8004c34:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c36:	2300      	movs	r3, #0
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	08009784 	.word	0x08009784
 8004c44:	08008ec8 	.word	0x08008ec8

08004c48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b2f      	cmp	r3, #47	; 0x2f
 8004c58:	d003      	beq.n	8004c62 <follow_path+0x1a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b5c      	cmp	r3, #92	; 0x5c
 8004c60:	d102      	bne.n	8004c68 <follow_path+0x20>
		path++;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b1f      	cmp	r3, #31
 8004c76:	d80a      	bhi.n	8004c8e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004c78:	2100      	movs	r1, #0
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fc73 	bl	8004566 <dir_sdi>
 8004c80:	4603      	mov	r3, r0
 8004c82:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004c8c:	e045      	b.n	8004d1a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ff18 	bl	8004ac8 <create_name>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d136      	bne.n	8004d10 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe87 	bl	80049b6 <dir_find>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004cb2:	7adb      	ldrb	r3, [r3, #11]
 8004cb4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d128      	bne.n	8004d14 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004cc2:	7bbb      	ldrb	r3, [r7, #14]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d123      	bne.n	8004d14 <follow_path+0xcc>
 8004ccc:	2305      	movs	r3, #5
 8004cce:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004cd0:	e020      	b.n	8004d14 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004cd2:	7bbb      	ldrb	r3, [r7, #14]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11d      	bne.n	8004d18 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ce2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	330b      	adds	r3, #11
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8004cf2:	2305      	movs	r3, #5
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e010      	b.n	8004d1a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fe05 	bl	8004910 <ld_clust>
 8004d06:	4602      	mov	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d0e:	e7be      	b.n	8004c8e <follow_path+0x46>
			if (res != FR_OK) break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <follow_path+0xd2>
				break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d18:	bf00      	nop
		}
	}

	return res;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d031      	beq.n	8004d9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e002      	b.n	8004d48 <get_ldnumber+0x24>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	3301      	adds	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d903      	bls.n	8004d58 <get_ldnumber+0x34>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b3a      	cmp	r3, #58	; 0x3a
 8004d56:	d1f4      	bne.n	8004d42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b3a      	cmp	r3, #58	; 0x3a
 8004d5e:	d11c      	bne.n	8004d9a <get_ldnumber+0x76>
			tp = *path;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	60fa      	str	r2, [r7, #12]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	3b30      	subs	r3, #48	; 0x30
 8004d70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b09      	cmp	r3, #9
 8004d76:	d80e      	bhi.n	8004d96 <get_ldnumber+0x72>
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d10a      	bne.n	8004d96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <get_ldnumber+0x72>
					vol = (int)i;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	e002      	b.n	8004da0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004d9e:	693b      	ldr	r3, [r7, #16]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
	...

08004dac <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff f889 	bl	8003ee2 <move_window>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <check_fs+0x2e>
		return 3;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e04a      	b.n	8004e70 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004de0:	3301      	adds	r3, #1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	b21a      	sxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004dee:	b21b      	sxth	r3, r3
 8004df0:	4313      	orrs	r3, r2
 8004df2:	b21b      	sxth	r3, r3
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <check_fs+0xcc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d001      	beq.n	8004dfe <check_fs+0x52>
		return 2;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e038      	b.n	8004e70 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3336      	adds	r3, #54	; 0x36
 8004e02:	3303      	adds	r3, #3
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	061a      	lsls	r2, r3, #24
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3336      	adds	r3, #54	; 0x36
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	4313      	orrs	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	3236      	adds	r2, #54	; 0x36
 8004e18:	3201      	adds	r2, #1
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	0212      	lsls	r2, r2, #8
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e2c:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <check_fs+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <check_fs+0x8a>
		return 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e01c      	b.n	8004e70 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3352      	adds	r3, #82	; 0x52
 8004e3a:	3303      	adds	r3, #3
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	061a      	lsls	r2, r3, #24
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3352      	adds	r3, #82	; 0x52
 8004e44:	3302      	adds	r3, #2
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	3252      	adds	r2, #82	; 0x52
 8004e50:	3201      	adds	r2, #1
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	0212      	lsls	r2, r2, #8
 8004e56:	4313      	orrs	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e64:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <check_fs+0xd0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <check_fs+0xc2>
		return 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <check_fs+0xc4>

	return 1;
 8004e6e:	2301      	movs	r3, #1
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	ffffaa55 	.word	0xffffaa55
 8004e7c:	00544146 	.word	0x00544146

08004e80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b096      	sub	sp, #88	; 0x58
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004e94:	68b8      	ldr	r0, [r7, #8]
 8004e96:	f7ff ff45 	bl	8004d24 <get_ldnumber>
 8004e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da01      	bge.n	8004ea6 <find_volume+0x26>
 8004ea2:	230b      	movs	r3, #11
 8004ea4:	e2b0      	b.n	8005408 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004ea6:	4aa1      	ldr	r2, [pc, #644]	; (800512c <find_volume+0x2ac>)
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <find_volume+0x3a>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	e2a6      	b.n	8005408 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 8004eba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ebc:	f7fe fe2a 	bl	8003b14 <lock_fs>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <find_volume+0x4a>
 8004ec6:	230f      	movs	r3, #15
 8004ec8:	e29e      	b.n	8005408 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ece:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01b      	beq.n	8004f12 <find_volume+0x92>
		stat = disk_status(fs->drv);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fd1f 	bl	8003924 <disk_status>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10c      	bne.n	8004f12 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <find_volume+0x8e>
 8004efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e27c      	b.n	8005408 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e27a      	b.n	8005408 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fd14 	bl	8003958 <disk_initialize>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f42:	2303      	movs	r3, #3
 8004f44:	e260      	b.n	8005408 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <find_volume+0xdc>
 8004f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	e255      	b.n	8005408 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f64:	f7ff ff22 	bl	8004dac <check_fs>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d153      	bne.n	800501e <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004f76:	2300      	movs	r3, #0
 8004f78:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7a:	e028      	b.n	8004fce <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004f86:	4413      	add	r3, r2
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <find_volume+0x13a>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	330b      	adds	r3, #11
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	061a      	lsls	r2, r3, #24
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	330a      	adds	r3, #10
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa8:	3209      	adds	r2, #9
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	0212      	lsls	r2, r2, #8
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb2:	3208      	adds	r2, #8
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	e000      	b.n	8004fbc <find_volume+0x13c>
 8004fba:	2200      	movs	r2, #0
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	3358      	adds	r3, #88	; 0x58
 8004fc2:	443b      	add	r3, r7
 8004fc4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fca:	3301      	adds	r3, #1
 8004fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d9d3      	bls.n	8004f7c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <find_volume+0x164>
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	3358      	adds	r3, #88	; 0x58
 8004fea:	443b      	add	r3, r7
 8004fec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ff0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <find_volume+0x184>
 8004ff8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ffc:	f7ff fed6 	bl	8004dac <check_fs>
 8005000:	4603      	mov	r3, r0
 8005002:	e000      	b.n	8005006 <find_volume+0x186>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800500a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <find_volume+0x19e>
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	3301      	adds	r3, #1
 8005016:	643b      	str	r3, [r7, #64]	; 0x40
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	2b03      	cmp	r3, #3
 800501c:	d9e2      	bls.n	8004fe4 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800501e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005022:	2b03      	cmp	r3, #3
 8005024:	d101      	bne.n	800502a <find_volume+0x1aa>
 8005026:	2301      	movs	r3, #1
 8005028:	e1ee      	b.n	8005408 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800502a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <find_volume+0x1b6>
 8005032:	230d      	movs	r3, #13
 8005034:	e1e8      	b.n	8005408 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	7b1b      	ldrb	r3, [r3, #12]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b21a      	sxth	r2, r3
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	7adb      	ldrb	r3, [r3, #11]
 8005042:	b21b      	sxth	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b21b      	sxth	r3, r3
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d001      	beq.n	8005052 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800504e:	230d      	movs	r3, #13
 8005050:	e1da      	b.n	8005408 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	7ddb      	ldrb	r3, [r3, #23]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	b21a      	sxth	r2, r3
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	7d9b      	ldrb	r3, [r3, #22]
 800505e:	b21b      	sxth	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	b21b      	sxth	r3, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d112      	bne.n	8005094 <find_volume+0x214>
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005074:	061a      	lsls	r2, r3, #24
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	4313      	orrs	r3, r2
 8005080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005082:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005086:	0212      	lsls	r2, r2, #8
 8005088:	4313      	orrs	r3, r2
 800508a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005090:	4313      	orrs	r3, r2
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005098:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	7c1a      	ldrb	r2, [r3, #16]
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d006      	beq.n	80050be <find_volume+0x23e>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d001      	beq.n	80050be <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 80050ba:	230d      	movs	r3, #13
 80050bc:	e1a4      	b.n	8005408 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	7b5a      	ldrb	r2, [r3, #13]
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <find_volume+0x278>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050e8:	461a      	mov	r2, r3
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 80050f8:	230d      	movs	r3, #13
 80050fa:	e185      	b.n	8005408 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	7c9b      	ldrb	r3, [r3, #18]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21a      	sxth	r2, r3
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	7c5b      	ldrb	r3, [r3, #17]
 8005108:	b21b      	sxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b21b      	sxth	r3, r3
 800510e:	b29a      	uxth	r2, r3
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8005126:	230d      	movs	r3, #13
 8005128:	e16e      	b.n	8005408 <find_volume+0x588>
 800512a:	bf00      	nop
 800512c:	200006a4 	.word	0x200006a4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	7d1b      	ldrb	r3, [r3, #20]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	b21a      	sxth	r2, r3
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	7cdb      	ldrb	r3, [r3, #19]
 800513c:	b21b      	sxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b21b      	sxth	r3, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005148:	2b00      	cmp	r3, #0
 800514a:	d112      	bne.n	8005172 <find_volume+0x2f2>
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005152:	061a      	lsls	r2, r3, #24
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	4313      	orrs	r3, r2
 800515e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005160:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005164:	0212      	lsls	r2, r2, #8
 8005166:	4313      	orrs	r3, r2
 8005168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800516a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800516e:	4313      	orrs	r3, r2
 8005170:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	7bdb      	ldrb	r3, [r3, #15]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	b21a      	sxth	r2, r3
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	7b9b      	ldrb	r3, [r3, #14]
 800517e:	b21b      	sxth	r3, r3
 8005180:	4313      	orrs	r3, r2
 8005182:	b21b      	sxth	r3, r3
 8005184:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005186:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <find_volume+0x310>
 800518c:	230d      	movs	r3, #13
 800518e:	e13b      	b.n	8005408 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	4413      	add	r3, r2
 8005196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005198:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800519c:	0912      	lsrs	r2, r2, #4
 800519e:	b292      	uxth	r2, r2
 80051a0:	4413      	add	r3, r2
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80051a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d201      	bcs.n	80051b0 <find_volume+0x330>
 80051ac:	230d      	movs	r3, #13
 80051ae:	e12b      	b.n	8005408 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80051b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80051bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <find_volume+0x34c>
 80051c8:	230d      	movs	r3, #13
 80051ca:	e11d      	b.n	8005408 <find_volume+0x588>
	fmt = FS_FAT12;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80051d8:	4293      	cmp	r3, r2
 80051da:	d902      	bls.n	80051e2 <find_volume+0x362>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d902      	bls.n	80051f2 <find_volume+0x372>
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005200:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005204:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	441a      	add	r2, r3
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8005210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	441a      	add	r2, r3
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800521c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005220:	2b03      	cmp	r3, #3
 8005222:	d121      	bne.n	8005268 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <find_volume+0x3b2>
 800522e:	230d      	movs	r3, #13
 8005230:	e0ea      	b.n	8005408 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005238:	061a      	lsls	r2, r3, #24
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	4313      	orrs	r3, r2
 8005244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005246:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800524a:	0212      	lsls	r2, r2, #8
 800524c:	4313      	orrs	r3, r2
 800524e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005250:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005254:	431a      	orrs	r2, r3
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
 8005266:	e025      	b.n	80052b4 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <find_volume+0x3f6>
 8005272:	230d      	movs	r3, #13
 8005274:	e0c8      	b.n	8005408 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	441a      	add	r2, r3
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005286:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800528a:	2b02      	cmp	r3, #2
 800528c:	d104      	bne.n	8005298 <find_volume+0x418>
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	e00c      	b.n	80052b2 <find_volume+0x432>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800529e:	4613      	mov	r3, r2
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	085a      	lsrs	r2, r3, #1
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80052b2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80052c0:	0a5b      	lsrs	r3, r3, #9
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d201      	bcs.n	80052ca <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 80052c6:	230d      	movs	r3, #13
 80052c8:	e09e      	b.n	8005408 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80052e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d177      	bne.n	80053e0 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	b21a      	sxth	r2, r3
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005300:	b21b      	sxth	r3, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	b21b      	sxth	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d16a      	bne.n	80053e0 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	3301      	adds	r3, #1
 800530e:	4619      	mov	r1, r3
 8005310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005312:	f7fe fde6 	bl	8003ee2 <move_window>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d161      	bne.n	80053e0 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	b21a      	sxth	r2, r3
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005334:	b21b      	sxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b21b      	sxth	r3, r3
 800533a:	4a35      	ldr	r2, [pc, #212]	; (8005410 <find_volume+0x590>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d14f      	bne.n	80053e0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	061a      	lsls	r2, r3, #24
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	789b      	ldrb	r3, [r3, #2]
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	4313      	orrs	r3, r2
 800534e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005350:	7852      	ldrb	r2, [r2, #1]
 8005352:	0212      	lsls	r2, r2, #8
 8005354:	4313      	orrs	r3, r2
 8005356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	4313      	orrs	r3, r2
 800535c:	4a2d      	ldr	r2, [pc, #180]	; (8005414 <find_volume+0x594>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d13e      	bne.n	80053e0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005368:	061a      	lsls	r2, r3, #24
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	4313      	orrs	r3, r2
 8005374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005376:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800537a:	0212      	lsls	r2, r2, #8
 800537c:	4313      	orrs	r3, r2
 800537e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005380:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005384:	4313      	orrs	r3, r2
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <find_volume+0x598>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d129      	bne.n	80053e0 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005392:	061a      	lsls	r2, r3, #24
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	4313      	orrs	r3, r2
 800539e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80053a4:	0212      	lsls	r2, r2, #8
 80053a6:	4313      	orrs	r3, r2
 80053a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80053ae:	431a      	orrs	r2, r3
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80053bc:	061a      	lsls	r2, r3, #24
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	4313      	orrs	r3, r2
 80053c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80053ce:	0212      	lsls	r2, r2, #8
 80053d0:	4313      	orrs	r3, r2
 80053d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80053d8:	431a      	orrs	r2, r3
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <find_volume+0x59c>)
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	4b0a      	ldr	r3, [pc, #40]	; (800541c <find_volume+0x59c>)
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <find_volume+0x59c>)
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005402:	f7fe fcfb 	bl	8003dfc <clear_lock>
#endif

	return FR_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3758      	adds	r7, #88	; 0x58
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	ffffaa55 	.word	0xffffaa55
 8005414:	41615252 	.word	0x41615252
 8005418:	61417272 	.word	0x61417272
 800541c:	200006a8 	.word	0x200006a8

08005420 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d022      	beq.n	8005478 <validate+0x58>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01d      	beq.n	8005478 <validate+0x58>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005442:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005446:	2b00      	cmp	r3, #0
 8005448:	d016      	beq.n	8005478 <validate+0x58>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005450:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800545a:	429a      	cmp	r2, r3
 800545c:	d10c      	bne.n	8005478 <validate+0x58>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005464:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fa5b 	bl	8003924 <disk_status>
 800546e:	4603      	mov	r3, r0
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005478:	2309      	movs	r3, #9
 800547a:	e00b      	b.n	8005494 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fb46 	bl	8003b14 <lock_fs>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <validate+0x72>
 800548e:	230f      	movs	r3, #15
 8005490:	e000      	b.n	8005494 <validate+0x74>

	return FR_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80054ae:	f107 0310 	add.w	r3, r7, #16
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fc36 	bl	8004d24 <get_ldnumber>
 80054b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	da01      	bge.n	80054c4 <f_mount+0x28>
 80054c0:	230b      	movs	r3, #11
 80054c2:	e04c      	b.n	800555e <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <f_mount+0xcc>)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d011      	beq.n	80054f8 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 80054d4:	69b8      	ldr	r0, [r7, #24]
 80054d6:	f7fe fc91 	bl	8003dfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fd28 	bl	8005f36 <ff_del_syncobj>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <f_mount+0x54>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e036      	b.n	800555e <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fcfb 	bl	8005f0e <ff_cre_syncobj>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <f_mount+0x86>
 800551e:	2302      	movs	r3, #2
 8005520:	e01d      	b.n	800555e <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4910      	ldr	r1, [pc, #64]	; (8005568 <f_mount+0xcc>)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <f_mount+0x9c>
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <f_mount+0xa0>
 8005538:	2300      	movs	r3, #0
 800553a:	e010      	b.n	800555e <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800553c:	f107 0108 	add.w	r1, r7, #8
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	2200      	movs	r2, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fc9a 	bl	8004e80 <find_volume>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	7dfa      	ldrb	r2, [r7, #23]
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe faeb 	bl	8003b32 <unlock_fs>
 800555c:	7dfb      	ldrb	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200006a4 	.word	0x200006a4

0800556c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005572:	af00      	add	r7, sp, #0
 8005574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005578:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800557c:	6018      	str	r0, [r3, #0]
 800557e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005582:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005586:	6019      	str	r1, [r3, #0]
 8005588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800558c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005590:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005596:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <f_open+0x38>
 80055a0:	2309      	movs	r3, #9
 80055a2:	e263      	b.n	8005a6c <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 80055a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055a8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80055b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055b8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80055bc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80055c0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	f002 021f 	and.w	r2, r2, #31
 80055ca:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80055cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055d0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	f107 0108 	add.w	r1, r7, #8
 80055e0:	f107 0320 	add.w	r3, r7, #32
 80055e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fc49 	bl	8004e80 <find_volume>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80055f4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8229 	bne.w	8005a50 <f_open+0x4e4>
		INIT_BUF(dj);
 80055fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005602:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005606:	f107 0214 	add.w	r2, r7, #20
 800560a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800560e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005612:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	f107 0320 	add.w	r3, r7, #32
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fb12 	bl	8004c48 <follow_path>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800562a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800562e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005636:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800563a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800563e:	2b00      	cmp	r3, #0
 8005640:	d11d      	bne.n	800567e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8005642:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800564a:	2306      	movs	r3, #6
 800564c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005650:	e015      	b.n	800567e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005656:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	f107 0320 	add.w	r3, r7, #32
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fa7c 	bl	8003b70 <chk_lock>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800567e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005682:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 031c 	and.w	r3, r3, #28
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80e6 	beq.w	800585e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8005692:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005696:	2b00      	cmp	r3, #0
 8005698:	d027      	beq.n	80056ea <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800569a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d10e      	bne.n	80056c0 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80056a2:	f7fe fad1 	bl	8003c48 <enq_lock>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <f_open+0x14e>
 80056ac:	f107 0320 	add.w	r3, r7, #32
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f9cf 	bl	8004a54 <dir_register>
 80056b6:	4603      	mov	r3, r0
 80056b8:	e000      	b.n	80056bc <f_open+0x150>
 80056ba:	2312      	movs	r3, #18
 80056bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80056c4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80056c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80056cc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	f042 0208 	orr.w	r2, r2, #8
 80056d6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80056d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80056dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80056e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056e4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80056e8:	e017      	b.n	800571a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80056ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80056ee:	330b      	adds	r3, #11
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f003 0311 	and.w	r3, r3, #17
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <f_open+0x196>
					res = FR_DENIED;
 80056fa:	2307      	movs	r3, #7
 80056fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005700:	e00b      	b.n	800571a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005706:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <f_open+0x1ae>
						res = FR_EXIST;
 8005714:	2308      	movs	r3, #8
 8005716:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800571a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 80c1 	bne.w	80058a6 <f_open+0x33a>
 8005724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005728:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80b7 	beq.w	80058a6 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8005738:	f7fe f888 	bl	800384c <get_fattime>
 800573c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005740:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005744:	330e      	adds	r3, #14
 8005746:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005752:	b29b      	uxth	r3, r3
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b29a      	uxth	r2, r3
 8005758:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800575c:	330f      	adds	r3, #15
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005766:	0c1a      	lsrs	r2, r3, #16
 8005768:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800576c:	3310      	adds	r3, #16
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005776:	0e1a      	lsrs	r2, r3, #24
 8005778:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800577c:	3311      	adds	r3, #17
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005782:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005786:	330b      	adds	r3, #11
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800578c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005790:	331c      	adds	r3, #28
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800579a:	331d      	adds	r3, #29
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80057a4:	331e      	adds	r3, #30
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80057ae:	331f      	adds	r3, #31
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80057b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80057bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057c0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff f8a3 	bl	8004910 <ld_clust>
 80057ca:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80057ce:	2100      	movs	r1, #0
 80057d0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80057d4:	f7ff f8c9 	bl	800496a <st_clust>
				dj.fs->wflag = 1;
 80057d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80057e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80057ea:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d059      	beq.n	80058a6 <f_open+0x33a>
					dw = dj.fs->winsect;
 80057f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80057fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057fe:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005802:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8005806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800580a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800580e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005812:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fd7a 	bl	8004310 <remove_chain>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8005822:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005826:	2b00      	cmp	r3, #0
 8005828:	d13d      	bne.n	80058a6 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800582a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800582e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005836:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800583a:	3a01      	subs	r2, #1
 800583c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8005840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005844:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800584c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fb46 	bl	8003ee2 <move_window>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800585c:	e023      	b.n	80058a6 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800585e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11f      	bne.n	80058a6 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005866:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800586a:	330b      	adds	r3, #11
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <f_open+0x312>
					res = FR_NO_FILE;
 8005876:	2304      	movs	r3, #4
 8005878:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800587c:	e013      	b.n	80058a6 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800587e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005882:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <f_open+0x33a>
 8005890:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005894:	330b      	adds	r3, #11
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <f_open+0x33a>
						res = FR_DENIED;
 80058a0:	2307      	movs	r3, #7
 80058a2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80058a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d153      	bne.n	8005956 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80058ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058b2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <f_open+0x36c>
				mode |= FA__WRITTEN;
 80058c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058c4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80058c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80058cc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80058d0:	7812      	ldrb	r2, [r2, #0]
 80058d2:	f042 0220 	orr.w	r2, r2, #32
 80058d6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80058d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80058e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058e4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80058e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058ec:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80058f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005904:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800590c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf14      	ite	ne
 800591a:	2301      	movne	r3, #1
 800591c:	2300      	moveq	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	f107 0320 	add.w	r3, r7, #32
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe f9b1 	bl	8003c90 <inc_lock>
 800592e:	4602      	mov	r2, r0
 8005930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005934:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800593e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005942:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <f_open+0x3ea>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005956:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800595a:	2b00      	cmp	r3, #0
 800595c:	d178      	bne.n	8005a50 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800595e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005962:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800596c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8005976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800597a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800598a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800598e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005992:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe ffba 	bl	8004910 <ld_clust>
 800599c:	4602      	mov	r2, r0
 800599e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059a2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80059ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80059b0:	331f      	adds	r3, #31
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	061a      	lsls	r2, r3, #24
 80059b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80059ba:	331e      	adds	r3, #30
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	041b      	lsls	r3, r3, #16
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80059c6:	321d      	adds	r2, #29
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	0212      	lsls	r2, r2, #8
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80059d2:	321c      	adds	r2, #28
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059dc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80059e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80059f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a0a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a1a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005a1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a26:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8005a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a34:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a3e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a46:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a54:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a5c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe f865 	bl	8003b32 <unlock_fs>
 8005a68:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b08c      	sub	sp, #48	; 0x30
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fcc6 	bl	8005420 <validate>
 8005a94:	4603      	mov	r3, r0
 8005a96:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <f_read+0x3c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa4:	7ffa      	ldrb	r2, [r7, #31]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe f842 	bl	8003b32 <unlock_fs>
 8005aae:	7ffb      	ldrb	r3, [r7, #31]
 8005ab0:	e192      	b.n	8005dd8 <f_read+0x362>
	if (fp->err)								/* Check error */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe f831 	bl	8003b32 <unlock_fs>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005ad6:	e17f      	b.n	8005dd8 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aec:	2107      	movs	r1, #7
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe f81f 	bl	8003b32 <unlock_fs>
 8005af4:	2307      	movs	r3, #7
 8005af6:	e16f      	b.n	8005dd8 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	f240 8157 	bls.w	8005dc0 <f_read+0x34a>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005b16:	e153      	b.n	8005dc0 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 811c 	bne.w	8005d60 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b2e:	0a5b      	lsrs	r3, r3, #9
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b38:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	4013      	ands	r3, r2
 8005b42:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d147      	bne.n	8005bda <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5c:	e018      	b.n	8005b90 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fe fcc4 	bl	80044fe <clmt_clust>
 8005b76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b78:	e00a      	b.n	8005b90 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fe f9f9 	bl	8003f80 <get_fat>
 8005b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d80c      	bhi.n	8005bb0 <f_read+0x13a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd ffc3 	bl	8003b32 <unlock_fs>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e113      	b.n	8005dd8 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d10c      	bne.n	8005bd2 <f_read+0x15c>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd ffb2 	bl	8003b32 <unlock_fs>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e102      	b.n	8005dd8 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe f9a8 	bl	8003f3e <clust2sect>
 8005bee:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10c      	bne.n	8005c10 <f_read+0x19a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c04:	2102      	movs	r1, #2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd ff93 	bl	8003b32 <unlock_fs>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0e3      	b.n	8005dd8 <f_read+0x362>
			sect += csect;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0a5b      	lsrs	r3, r3, #9
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d04d      	beq.n	8005cc0 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005c24:	7dfa      	ldrb	r2, [r7, #23]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	4413      	add	r3, r2
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005c30:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d908      	bls.n	8005c4a <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c3e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005c42:	461a      	mov	r2, r3
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c50:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	6a39      	ldr	r1, [r7, #32]
 8005c5a:	f7fd fea3 	bl	80039a4 <disk_read>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c72:	2101      	movs	r1, #1
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd ff5c 	bl	8003b32 <unlock_fs>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0ac      	b.n	8005dd8 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <f_read+0x242>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d90d      	bls.n	8005cb8 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	025b      	lsls	r3, r3, #9
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	4413      	add	r3, r2
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fd feb6 	bl	8003a24 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	025b      	lsls	r3, r3, #9
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005cbe:	e069      	b.n	8005d94 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d045      	beq.n	8005d58 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d024      	beq.n	8005d24 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ce0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005cec:	2301      	movs	r3, #1
 8005cee:	f7fd fe79 	bl	80039e4 <disk_write>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd ff12 	bl	8003b32 <unlock_fs>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e062      	b.n	8005dd8 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	2301      	movs	r3, #1
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	f7fd fe36 	bl	80039a4 <disk_read>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00c      	beq.n	8005d58 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd feef 	bl	8003b32 <unlock_fs>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e03f      	b.n	8005dd8 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d901      	bls.n	8005d7c <f_read+0x306>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6a38      	ldr	r0, [r7, #32]
 8005d90:	f7fd fe48 	bl	8003a24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	4413      	add	r3, r2
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	441a      	add	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	441a      	add	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f47f aea8 	bne.w	8005b18 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd feae 	bl	8003b32 <unlock_fs>
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3730      	adds	r7, #48	; 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005df4:	e01b      	b.n	8005e2e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005df6:	f107 0310 	add.w	r3, r7, #16
 8005dfa:	f107 0114 	add.w	r1, r7, #20
 8005dfe:	2201      	movs	r2, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fe38 	bl	8005a76 <f_read>
		if (rc != 1) break;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d116      	bne.n	8005e3a <f_gets+0x5a>
		c = s[0];
 8005e0c:	7d3b      	ldrb	r3, [r7, #20]
 8005e0e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b0d      	cmp	r3, #13
 8005e14:	d100      	bne.n	8005e18 <f_gets+0x38>
 8005e16:	e00a      	b.n	8005e2e <f_gets+0x4e>
		*p++ = c;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	61ba      	str	r2, [r7, #24]
 8005e1e:	7dfa      	ldrb	r2, [r7, #23]
 8005e20:	701a      	strb	r2, [r3, #0]
		n++;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b0a      	cmp	r3, #10
 8005e2c:	d007      	beq.n	8005e3e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	dbde      	blt.n	8005df6 <f_gets+0x16>
 8005e38:	e002      	b.n	8005e40 <f_gets+0x60>
		if (rc != 1) break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005e3e:	bf00      	nop
	}
	*p = 0;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <f_gets+0x70>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	e000      	b.n	8005e52 <f_gets+0x72>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e74:	7a5b      	ldrb	r3, [r3, #9]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d831      	bhi.n	8005ee0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e7e:	7a5b      	ldrb	r3, [r3, #9]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e86:	2100      	movs	r1, #0
 8005e88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e8c:	7a5b      	ldrb	r3, [r3, #9]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005e9c:	7a5b      	ldrb	r3, [r3, #9]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	79fa      	ldrb	r2, [r7, #7]
 8005ea8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005eac:	7a5b      	ldrb	r3, [r3, #9]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	b2d1      	uxtb	r1, r2
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <FATFS_LinkDriverEx+0x90>)
 8005eb6:	7251      	strb	r1, [r2, #9]
 8005eb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005eba:	7dbb      	ldrb	r3, [r7, #22]
 8005ebc:	3330      	adds	r3, #48	; 0x30
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	223a      	movs	r2, #58	; 0x3a
 8005eca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	3302      	adds	r3, #2
 8005ed0:	222f      	movs	r2, #47	; 0x2f
 8005ed2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	3303      	adds	r3, #3
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr
 8005eec:	200006c4 	.word	0x200006c4

08005ef0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005efa:	2200      	movs	r2, #0
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff ffac 	bl	8005e5c <FATFS_LinkDriverEx>
 8005f04:	4603      	mov	r3, r0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	4603      	mov	r3, r0
 8005f16:	6039      	str	r1, [r7, #0]
 8005f18:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
  //*sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
  ret = (*sobj != NULL);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr

08005f36 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98c 	bl	800625c <osSemaphoreDelete>
  return 1;
 8005f44:	2301      	movs	r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  
  //if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
  {
    ret = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f91a 	bl	80061ac <osSemaphoreRelease>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f86:	f3ef 8305 	mrs	r3, IPSR
 8005f8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f92:	f3ef 8310 	mrs	r3, PRIMASK
 8005f96:	607b      	str	r3, [r7, #4]
  return(result);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <osKernelInitialize+0x32>
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <osKernelInitialize+0x60>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d109      	bne.n	8005fba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	603b      	str	r3, [r7, #0]
  return(result);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fb2:	f06f 0305 	mvn.w	r3, #5
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e00c      	b.n	8005fd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <osKernelInitialize+0x60>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <osKernelInitialize+0x60>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	200006d0 	.word	0x200006d0

08005fe4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fea:	f3ef 8305 	mrs	r3, IPSR
 8005fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffa:	607b      	str	r3, [r7, #4]
  return(result);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <osKernelStart+0x32>
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <osKernelStart+0x64>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d109      	bne.n	800601e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800600a:	f3ef 8311 	mrs	r3, BASEPRI
 800600e:	603b      	str	r3, [r7, #0]
  return(result);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006016:	f06f 0305 	mvn.w	r3, #5
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00e      	b.n	800603c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <osKernelStart+0x64>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d107      	bne.n	8006036 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <osKernelStart+0x64>)
 8006028:	2202      	movs	r2, #2
 800602a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800602c:	f001 fa10 	bl	8007450 <vTaskStartScheduler>
      stat = osOK;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e002      	b.n	800603c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200006d0 	.word	0x200006d0

0800604c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b092      	sub	sp, #72	; 0x48
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605c:	f3ef 8305 	mrs	r3, IPSR
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 8094 	bne.w	8006192 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606a:	f3ef 8310 	mrs	r3, PRIMASK
 800606e:	623b      	str	r3, [r7, #32]
  return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 808d 	bne.w	8006192 <osThreadNew+0x146>
 8006078:	4b48      	ldr	r3, [pc, #288]	; (800619c <osThreadNew+0x150>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d106      	bne.n	800608e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006080:	f3ef 8311 	mrs	r3, BASEPRI
 8006084:	61fb      	str	r3, [r7, #28]
  return(result);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f040 8082 	bne.w	8006192 <osThreadNew+0x146>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d07e      	beq.n	8006192 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006098:	2318      	movs	r3, #24
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800609c:	2300      	movs	r3, #0
 800609e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80060a0:	f107 031b 	add.w	r3, r7, #27
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d045      	beq.n	800613e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <osThreadNew+0x74>
        name = attr->name;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <osThreadNew+0x9a>
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b38      	cmp	r3, #56	; 0x38
 80060d8:	d805      	bhi.n	80060e6 <osThreadNew+0x9a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <osThreadNew+0x9e>
        return (NULL);
 80060e6:	2300      	movs	r3, #0
 80060e8:	e054      	b.n	8006194 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <osThreadNew+0xd4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2bbb      	cmp	r3, #187	; 0xbb
 8006108:	d90a      	bls.n	8006120 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <osThreadNew+0xd4>
        mem = 1;
 800611a:	2301      	movs	r3, #1
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	e010      	b.n	8006142 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10c      	bne.n	8006142 <osThreadNew+0xf6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d108      	bne.n	8006142 <osThreadNew+0xf6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <osThreadNew+0xf6>
          mem = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
 800613c:	e001      	b.n	8006142 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006150:	9202      	str	r2, [sp, #8]
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 ff54 	bl	800700c <xTaskCreateStatic>
 8006164:	4603      	mov	r3, r0
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e013      	b.n	8006192 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d110      	bne.n	8006192 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	b29a      	uxth	r2, r3
 8006174:	f107 0314 	add.w	r3, r7, #20
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 ff9e 	bl	80070c4 <xTaskCreate>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <osThreadNew+0x146>
          hTask = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3738      	adds	r7, #56	; 0x38
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200006d0 	.word	0x200006d0

080061a0 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80061a4:	2000      	movs	r0, #0
 80061a6:	f001 f8e1 	bl	800736c <vTaskDelete>
#endif
  for (;;);
 80061aa:	e7fe      	b.n	80061aa <osThreadExit+0xa>

080061ac <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80061c2:	f06f 0303 	mvn.w	r3, #3
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e03e      	b.n	8006248 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ca:	f3ef 8305 	mrs	r3, IPSR
 80061ce:	617b      	str	r3, [r7, #20]
  return(result);
 80061d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d6:	f3ef 8310 	mrs	r3, PRIMASK
 80061da:	613b      	str	r3, [r7, #16]
  return(result);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <osSemaphoreRelease+0x4a>
 80061e2:	4b1c      	ldr	r3, [pc, #112]	; (8006254 <osSemaphoreRelease+0xa8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d120      	bne.n	800622c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061ea:	f3ef 8311 	mrs	r3, BASEPRI
 80061ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01a      	beq.n	800622c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	4619      	mov	r1, r3
 8006200:	69b8      	ldr	r0, [r7, #24]
 8006202:	f000 fbdb 	bl	80069bc <xQueueGiveFromISR>
 8006206:	4603      	mov	r3, r0
 8006208:	2b01      	cmp	r3, #1
 800620a:	d003      	beq.n	8006214 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800620c:	f06f 0302 	mvn.w	r3, #2
 8006210:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006212:	e018      	b.n	8006246 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d015      	beq.n	8006246 <osSemaphoreRelease+0x9a>
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <osSemaphoreRelease+0xac>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800622a:	e00c      	b.n	8006246 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800622c:	2300      	movs	r3, #0
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	69b8      	ldr	r0, [r7, #24]
 8006234:	f000 fa2c 	bl	8006690 <xQueueGenericSend>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d004      	beq.n	8006248 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800623e:	f06f 0302 	mvn.w	r3, #2
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e000      	b.n	8006248 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006246:	bf00      	nop
    }
  }

  return (stat);
 8006248:	69fb      	ldr	r3, [r7, #28]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200006d0 	.word	0x200006d0
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006268:	f3ef 8305 	mrs	r3, IPSR
 800626c:	617b      	str	r3, [r7, #20]
  return(result);
 800626e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10f      	bne.n	8006294 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006274:	f3ef 8310 	mrs	r3, PRIMASK
 8006278:	613b      	str	r3, [r7, #16]
  return(result);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <osSemaphoreDelete+0x38>
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <osSemaphoreDelete+0x68>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d109      	bne.n	800629c <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006288:	f3ef 8311 	mrs	r3, BASEPRI
 800628c:	60fb      	str	r3, [r7, #12]
  return(result);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006294:	f06f 0305 	mvn.w	r3, #5
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e00e      	b.n	80062ba <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80062a2:	f06f 0303 	mvn.w	r3, #3
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e007      	b.n	80062ba <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	f000 fe50 	bl	8006f50 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80062b4:	69b8      	ldr	r0, [r7, #24]
 80062b6:	f000 fcef 	bl	8006c98 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80062ba:	69fb      	ldr	r3, [r7, #28]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	200006d0 	.word	0x200006d0

080062c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <vApplicationGetIdleTaskMemory+0x28>)
 80062d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a05      	ldr	r2, [pc, #20]	; (80062f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80062de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	601a      	str	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	200006d4 	.word	0x200006d4
 80062f4:	20000790 	.word	0x20000790

080062f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4a07      	ldr	r2, [pc, #28]	; (8006324 <vApplicationGetTimerTaskMemory+0x2c>)
 8006308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4a06      	ldr	r2, [pc, #24]	; (8006328 <vApplicationGetTimerTaskMemory+0x30>)
 800630e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006316:	601a      	str	r2, [r3, #0]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000990 	.word	0x20000990
 8006328:	20000a4c 	.word	0x20000a4c

0800632c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f103 0208 	add.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f103 0208 	add.w	r2, r3, #8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f103 0208 	add.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr

0800636a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d103      	bne.n	80063e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e00c      	b.n	8006402 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3308      	adds	r3, #8
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e002      	b.n	80063f6 <vListInsert+0x2e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d2f6      	bcs.n	80063f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6892      	ldr	r2, [r2, #8]
 800644e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6852      	ldr	r2, [r2, #4]
 8006458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d103      	bne.n	800646c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	1e5a      	subs	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
	...

0800648c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064b6:	f002 f911 	bl	80086dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	3b01      	subs	r3, #1
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	441a      	add	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	22ff      	movs	r2, #255	; 0xff
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d114      	bne.n	8006536 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3310      	adds	r3, #16
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fa35 	bl	8007988 <xTaskRemoveFromEventList>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <xQueueGenericReset+0xcc>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	e009      	b.n	800654a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3310      	adds	r3, #16
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fef6 	bl	800632c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fef1 	bl	800632c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800654a:	f002 f8f7 	bl	800873c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800654e:	2301      	movs	r3, #1
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <xQueueGenericCreateStatic+0x52>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <xQueueGenericCreateStatic+0x56>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <xQueueGenericCreateStatic+0x58>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	623b      	str	r3, [r7, #32]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <xQueueGenericCreateStatic+0x7e>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <xQueueGenericCreateStatic+0x82>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueGenericCreateStatic+0x84>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	61fb      	str	r3, [r7, #28]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065fa:	2350      	movs	r3, #80	; 0x50
 80065fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b50      	cmp	r3, #80	; 0x50
 8006602:	d00a      	beq.n	800661a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61bb      	str	r3, [r7, #24]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00d      	beq.n	8006640 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800662c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f805 	bl	800664a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006642:	4618      	mov	r0, r3
 8006644:	3730      	adds	r7, #48	; 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006678:	2101      	movs	r1, #1
 800667a:	69b8      	ldr	r0, [r7, #24]
 800667c:	f7ff ff06 	bl	800648c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08e      	sub	sp, #56	; 0x38
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <xQueueGenericSend+0x32>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <xQueueGenericSend+0x40>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <xQueueGenericSend+0x44>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <xQueueGenericSend+0x46>
 80066d4:	2300      	movs	r3, #0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <xQueueGenericSend+0x60>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d103      	bne.n	80066fe <xQueueGenericSend+0x6e>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <xQueueGenericSend+0x72>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueGenericSend+0x74>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xQueueGenericSend+0x8e>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	623b      	str	r3, [r7, #32]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800671e:	f001 faf9 	bl	8007d14 <xTaskGetSchedulerState>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <xQueueGenericSend+0x9e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <xQueueGenericSend+0xa2>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xQueueGenericSend+0xa4>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericSend+0xbe>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	61fb      	str	r3, [r7, #28]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800674e:	f001 ffc5 	bl	80086dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <xQueueGenericSend+0xd4>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d129      	bne.n	80067b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800676a:	f000 fab8 	bl	8006cde <prvCopyDataToQueue>
 800676e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	3324      	adds	r3, #36	; 0x24
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f903 	bl	8007988 <xTaskRemoveFromEventList>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006788:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <xQueueGenericSend+0x1f8>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	e00a      	b.n	80067b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067a0:	4b39      	ldr	r3, [pc, #228]	; (8006888 <xQueueGenericSend+0x1f8>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067b0:	f001 ffc4 	bl	800873c <vPortExitCritical>
				return pdPASS;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e063      	b.n	8006880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067be:	f001 ffbd 	bl	800873c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e05c      	b.n	8006880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f93d 	bl	8007a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d6:	2301      	movs	r3, #1
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067da:	f001 ffaf 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067de:	f000 fea7 	bl	8007530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067e2:	f001 ff7b 	bl	80086dc <vPortEnterCritical>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d103      	bne.n	80067fc <xQueueGenericSend+0x16c>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006802:	b25b      	sxtb	r3, r3
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d103      	bne.n	8006812 <xQueueGenericSend+0x182>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006812:	f001 ff93 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006816:	1d3a      	adds	r2, r7, #4
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f001 f92c 	bl	8007a7c <xTaskCheckForTimeOut>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d124      	bne.n	8006874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800682a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800682c:	f000 fb4f 	bl	8006ece <prvIsQueueFull>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3310      	adds	r3, #16
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f001 f852 	bl	80078e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006846:	f000 fada 	bl	8006dfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800684a:	f000 fe7f 	bl	800754c <xTaskResumeAll>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f af7c 	bne.w	800674e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <xQueueGenericSend+0x1f8>)
 8006858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	e772      	b.n	800674e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686a:	f000 fac8 	bl	8006dfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800686e:	f000 fe6d 	bl	800754c <xTaskResumeAll>
 8006872:	e76c      	b.n	800674e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006876:	f000 fac2 	bl	8006dfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800687a:	f000 fe67 	bl	800754c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800687e:	2300      	movs	r3, #0
		}
	}
}
 8006880:	4618      	mov	r0, r3
 8006882:	3738      	adds	r7, #56	; 0x38
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <xQueueGenericSendFromISR+0x3c>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <xQueueGenericSendFromISR+0x40>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <xQueueGenericSendFromISR+0x42>
 80068cc:	2300      	movs	r3, #0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	623b      	str	r3, [r7, #32]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d103      	bne.n	80068f6 <xQueueGenericSendFromISR+0x6a>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <xQueueGenericSendFromISR+0x6e>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <xQueueGenericSendFromISR+0x70>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	61fb      	str	r3, [r7, #28]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006916:	f001 ffa3 	bl	8008860 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800691a:	f3ef 8211 	mrs	r2, BASEPRI
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	61ba      	str	r2, [r7, #24]
 8006930:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006932:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <xQueueGenericSendFromISR+0xbc>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d12c      	bne.n	80069a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006958:	f000 f9c1 	bl	8006cde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800695c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d112      	bne.n	800698c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f001 f808 	bl	8007988 <xTaskRemoveFromEventList>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e007      	b.n	800699c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800698c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006990:	3301      	adds	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b25a      	sxtb	r2, r3
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069a0:	e001      	b.n	80069a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3738      	adds	r7, #56	; 0x38
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	623b      	str	r3, [r7, #32]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <xQueueGiveFromISR+0x48>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	61fb      	str	r3, [r7, #28]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <xQueueGiveFromISR+0x58>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <xQueueGiveFromISR+0x5c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <xQueueGiveFromISR+0x5e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	61bb      	str	r3, [r7, #24]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a34:	f001 ff14 	bl	8008860 <vPortValidateInterruptPriority>
	__asm volatile
 8006a38:	f3ef 8211 	mrs	r2, BASEPRI
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	617a      	str	r2, [r7, #20]
 8006a4e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a50:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d22b      	bcs.n	8006abc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d112      	bne.n	8006aa6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d016      	beq.n	8006ab6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ff7b 	bl	8007988 <xTaskRemoveFromEventList>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e007      	b.n	8006ab6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	b25a      	sxtb	r2, r3
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	e001      	b.n	8006ac0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f383 8811 	msr	BASEPRI, r3
}
 8006aca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3738      	adds	r7, #56	; 0x38
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <xQueueReceive+0x30>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	623b      	str	r3, [r7, #32]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <xQueueReceive+0x3e>
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <xQueueReceive+0x42>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueReceive+0x44>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueReceive+0x5e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61fb      	str	r3, [r7, #28]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b36:	f001 f8ed 	bl	8007d14 <xTaskGetSchedulerState>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <xQueueReceive+0x6e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <xQueueReceive+0x72>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueReceive+0x74>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueReceive+0x8e>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	61bb      	str	r3, [r7, #24]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b66:	f001 fdb9 	bl	80086dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01f      	beq.n	8006bb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7a:	f000 f91a 	bl	8006db2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	3310      	adds	r3, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fef8 	bl	8007988 <xTaskRemoveFromEventList>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <xQueueReceive+0x1bc>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bae:	f001 fdc5 	bl	800873c <vPortExitCritical>
				return pdPASS;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e069      	b.n	8006c8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bbc:	f001 fdbe 	bl	800873c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e062      	b.n	8006c8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bca:	f107 0310 	add.w	r3, r7, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 ff3e 	bl	8007a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bd8:	f001 fdb0 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bdc:	f000 fca8 	bl	8007530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006be0:	f001 fd7c 	bl	80086dc <vPortEnterCritical>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d103      	bne.n	8006bfa <xQueueReceive+0x122>
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d103      	bne.n	8006c10 <xQueueReceive+0x138>
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c10:	f001 fd94 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c14:	1d3a      	adds	r2, r7, #4
 8006c16:	f107 0310 	add.w	r3, r7, #16
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 ff2d 	bl	8007a7c <xTaskCheckForTimeOut>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d123      	bne.n	8006c70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2a:	f000 f93a 	bl	8006ea2 <prvIsQueueEmpty>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	3324      	adds	r3, #36	; 0x24
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fe53 	bl	80078e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c44:	f000 f8db 	bl	8006dfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c48:	f000 fc80 	bl	800754c <xTaskResumeAll>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d189      	bne.n	8006b66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <xQueueReceive+0x1bc>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	e780      	b.n	8006b66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c66:	f000 f8ca 	bl	8006dfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c6a:	f000 fc6f 	bl	800754c <xTaskResumeAll>
 8006c6e:	e77a      	b.n	8006b66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c72:	f000 f8c4 	bl	8006dfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c76:	f000 fc69 	bl	800754c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7c:	f000 f911 	bl	8006ea2 <prvIsQueueEmpty>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f43f af6f 	beq.w	8006b66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3730      	adds	r7, #48	; 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	e000ed04 	.word	0xe000ed04

08006c98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <vQueueDelete+0x28>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f945 	bl	8006f50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 fec7 	bl	8008a64 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10d      	bne.n	8006d18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d14d      	bne.n	8006da0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f821 	bl	8007d50 <xTaskPriorityDisinherit>
 8006d0e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e043      	b.n	8006da0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d119      	bne.n	8006d52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6898      	ldr	r0, [r3, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	461a      	mov	r2, r3
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	f001 ffd5 	bl	8008cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d32b      	bcc.n	8006da0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	e026      	b.n	8006da0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68d8      	ldr	r0, [r3, #12]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	f001 ffbb 	bl	8008cd8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	441a      	add	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d207      	bcs.n	8006d8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	425b      	negs	r3, r3
 8006d88:	441a      	add	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d105      	bne.n	8006da0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006da8:	697b      	ldr	r3, [r7, #20]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	441a      	add	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d303      	bcc.n	8006de6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68d9      	ldr	r1, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	461a      	mov	r2, r3
 8006df0:	6838      	ldr	r0, [r7, #0]
 8006df2:	f001 ff71 	bl	8008cd8 <memcpy>
	}
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e06:	f001 fc69 	bl	80086dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e12:	e011      	b.n	8006e38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d012      	beq.n	8006e42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fdb1 	bl	8007988 <xTaskRemoveFromEventList>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e2c:	f000 fe88 	bl	8007b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dce9      	bgt.n	8006e14 <prvUnlockQueue+0x16>
 8006e40:	e000      	b.n	8006e44 <prvUnlockQueue+0x46>
					break;
 8006e42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	22ff      	movs	r2, #255	; 0xff
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e4c:	f001 fc76 	bl	800873c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e50:	f001 fc44 	bl	80086dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e5c:	e011      	b.n	8006e82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3310      	adds	r3, #16
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fd8c 	bl	8007988 <xTaskRemoveFromEventList>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e76:	f000 fe63 	bl	8007b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dce9      	bgt.n	8006e5e <prvUnlockQueue+0x60>
 8006e8a:	e000      	b.n	8006e8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	22ff      	movs	r2, #255	; 0xff
 8006e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e96:	f001 fc51 	bl	800873c <vPortExitCritical>
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eaa:	f001 fc17 	bl	80086dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	e001      	b.n	8006ec0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec0:	f001 fc3c 	bl	800873c <vPortExitCritical>

	return xReturn;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed6:	f001 fc01 	bl	80086dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d102      	bne.n	8006eec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e001      	b.n	8006ef0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ef0:	f001 fc24 	bl	800873c <vPortExitCritical>

	return xReturn;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e014      	b.n	8006f3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f10:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <vQueueAddToRegistry+0x4c>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f1c:	490b      	ldr	r1, [pc, #44]	; (8006f4c <vQueueAddToRegistry+0x4c>)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f26:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <vQueueAddToRegistry+0x4c>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f32:	e006      	b.n	8006f42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b07      	cmp	r3, #7
 8006f3e:	d9e7      	bls.n	8006f10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	20000e4c 	.word	0x20000e4c

08006f50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e016      	b.n	8006f8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f5e:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <vQueueUnregisterQueue+0x50>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d10b      	bne.n	8006f86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006f6e:	4a0c      	ldr	r2, [pc, #48]	; (8006fa0 <vQueueUnregisterQueue+0x50>)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2100      	movs	r1, #0
 8006f74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <vQueueUnregisterQueue+0x50>)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	4413      	add	r3, r2
 8006f80:	2200      	movs	r2, #0
 8006f82:	605a      	str	r2, [r3, #4]
				break;
 8006f84:	e006      	b.n	8006f94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b07      	cmp	r3, #7
 8006f90:	d9e5      	bls.n	8006f5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000e4c 	.word	0x20000e4c

08006fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fb4:	f001 fb92 	bl	80086dc <vPortEnterCritical>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d103      	bne.n	8006fce <vQueueWaitForMessageRestricted+0x2a>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d103      	bne.n	8006fe4 <vQueueWaitForMessageRestricted+0x40>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe4:	f001 fbaa 	bl	800873c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fc99 	bl	8007930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ffe:	6978      	ldr	r0, [r7, #20]
 8007000:	f7ff fefd 	bl	8006dfe <prvUnlockQueue>
	}
 8007004:	bf00      	nop
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	; 0x38
 8007010:	af04      	add	r7, sp, #16
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	623b      	str	r3, [r7, #32]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <xTaskCreateStatic+0x46>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61fb      	str	r3, [r7, #28]
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007052:	23bc      	movs	r3, #188	; 0xbc
 8007054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2bbc      	cmp	r3, #188	; 0xbc
 800705a:	d00a      	beq.n	8007072 <xTaskCreateStatic+0x66>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	61bb      	str	r3, [r7, #24]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01e      	beq.n	80070b6 <xTaskCreateStatic+0xaa>
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01b      	beq.n	80070b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007086:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	2202      	movs	r2, #2
 800708c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007090:	2300      	movs	r3, #0
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	9302      	str	r3, [sp, #8]
 8007098:	f107 0314 	add.w	r3, r7, #20
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f851 	bl	8007150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070b0:	f000 f8ec 	bl	800728c <prvAddNewTaskToReadyList>
 80070b4:	e001      	b.n	80070ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070ba:	697b      	ldr	r3, [r7, #20]
	}
 80070bc:	4618      	mov	r0, r3
 80070be:	3728      	adds	r7, #40	; 0x28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08c      	sub	sp, #48	; 0x30
 80070c8:	af04      	add	r7, sp, #16
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fbff 	bl	80088dc <pvPortMalloc>
 80070de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070e6:	20bc      	movs	r0, #188	; 0xbc
 80070e8:	f001 fbf8 	bl	80088dc <pvPortMalloc>
 80070ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
 80070fa:	e005      	b.n	8007108 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	f001 fcb1 	bl	8008a64 <vPortFree>
 8007102:	e001      	b.n	8007108 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d017      	beq.n	800713e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	2300      	movs	r3, #0
 800711a:	9303      	str	r3, [sp, #12]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	9302      	str	r3, [sp, #8]
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f80f 	bl	8007150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007132:	69f8      	ldr	r0, [r7, #28]
 8007134:	f000 f8aa 	bl	800728c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007138:	2301      	movs	r3, #1
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	e002      	b.n	8007144 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800713e:	f04f 33ff 	mov.w	r3, #4294967295
 8007142:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007144:	69bb      	ldr	r3, [r7, #24]
	}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	461a      	mov	r2, r3
 8007168:	21a5      	movs	r1, #165	; 0xa5
 800716a:	f001 fdc3 	bl	8008cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007178:	3b01      	subs	r3, #1
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	617b      	str	r3, [r7, #20]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e012      	b.n	80071d4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	7819      	ldrb	r1, [r3, #0]
 80071b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	3334      	adds	r3, #52	; 0x34
 80071be:	460a      	mov	r2, r1
 80071c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d9e9      	bls.n	80071ae <prvInitialiseNewTask+0x5e>
 80071da:	e000      	b.n	80071de <prvInitialiseNewTask+0x8e>
		{
			break;
 80071dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	2b37      	cmp	r3, #55	; 0x37
 80071ea:	d901      	bls.n	80071f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ec:	2337      	movs	r3, #55	; 0x37
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2200      	movs	r2, #0
 8007200:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	3304      	adds	r3, #4
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff f8af 	bl	800636a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	3318      	adds	r3, #24
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff f8aa 	bl	800636a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	2200      	movs	r2, #0
 8007238:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	3354      	adds	r3, #84	; 0x54
 8007240:	2260      	movs	r2, #96	; 0x60
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fd55 	bl	8008cf4 <memset>
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <prvInitialiseNewTask+0x130>)
 800724e:	659a      	str	r2, [r3, #88]	; 0x58
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <prvInitialiseNewTask+0x134>)
 8007254:	65da      	str	r2, [r3, #92]	; 0x5c
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <prvInitialiseNewTask+0x138>)
 800725a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	69b8      	ldr	r0, [r7, #24]
 8007262:	f001 f949 	bl	80084f8 <pxPortInitialiseStack>
 8007266:	4602      	mov	r2, r0
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007278:	bf00      	nop
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	08009824 	.word	0x08009824
 8007284:	08009844 	.word	0x08009844
 8007288:	08009804 	.word	0x08009804

0800728c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007294:	f001 fa22 	bl	80086dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007298:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <prvAddNewTaskToReadyList+0xc4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	4a2c      	ldr	r2, [pc, #176]	; (8007350 <prvAddNewTaskToReadyList+0xc4>)
 80072a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072a2:	4b2c      	ldr	r3, [pc, #176]	; (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072aa:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <prvAddNewTaskToReadyList+0xc4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d110      	bne.n	80072da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072b8:	f000 fc66 	bl	8007b88 <prvInitialiseTaskLists>
 80072bc:	e00d      	b.n	80072da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072be:	4b26      	ldr	r3, [pc, #152]	; (8007358 <prvAddNewTaskToReadyList+0xcc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072c6:	4b23      	ldr	r3, [pc, #140]	; (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d802      	bhi.n	80072da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072d4:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <prvAddNewTaskToReadyList+0xc8>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072da:	4b20      	ldr	r3, [pc, #128]	; (800735c <prvAddNewTaskToReadyList+0xd0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3301      	adds	r3, #1
 80072e0:	4a1e      	ldr	r2, [pc, #120]	; (800735c <prvAddNewTaskToReadyList+0xd0>)
 80072e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072e4:	4b1d      	ldr	r3, [pc, #116]	; (800735c <prvAddNewTaskToReadyList+0xd0>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f0:	4b1b      	ldr	r3, [pc, #108]	; (8007360 <prvAddNewTaskToReadyList+0xd4>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d903      	bls.n	8007300 <prvAddNewTaskToReadyList+0x74>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	4a18      	ldr	r2, [pc, #96]	; (8007360 <prvAddNewTaskToReadyList+0xd4>)
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <prvAddNewTaskToReadyList+0xd8>)
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7ff f833 	bl	8006382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800731c:	f001 fa0e 	bl	800873c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007320:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <prvAddNewTaskToReadyList+0xcc>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007328:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <prvAddNewTaskToReadyList+0xc8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	429a      	cmp	r2, r3
 8007334:	d207      	bcs.n	8007346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <prvAddNewTaskToReadyList+0xdc>)
 8007338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20001360 	.word	0x20001360
 8007354:	20000e8c 	.word	0x20000e8c
 8007358:	2000136c 	.word	0x2000136c
 800735c:	2000137c 	.word	0x2000137c
 8007360:	20001368 	.word	0x20001368
 8007364:	20000e90 	.word	0x20000e90
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007374:	f001 f9b2 	bl	80086dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <vTaskDelete+0x18>
 800737e:	4b2c      	ldr	r3, [pc, #176]	; (8007430 <vTaskDelete+0xc4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	e000      	b.n	8007386 <vTaskDelete+0x1a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff f853 	bl	8006438 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3318      	adds	r3, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff f84a 	bl	8006438 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80073a4:	4b23      	ldr	r3, [pc, #140]	; (8007434 <vTaskDelete+0xc8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a22      	ldr	r2, [pc, #136]	; (8007434 <vTaskDelete+0xc8>)
 80073ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80073ae:	4b20      	ldr	r3, [pc, #128]	; (8007430 <vTaskDelete+0xc4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d10b      	bne.n	80073d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	481e      	ldr	r0, [pc, #120]	; (8007438 <vTaskDelete+0xcc>)
 80073c0:	f7fe ffdf 	bl	8006382 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <vTaskDelete+0xd0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	4a1c      	ldr	r2, [pc, #112]	; (800743c <vTaskDelete+0xd0>)
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e009      	b.n	80073e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <vTaskDelete+0xd4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <vTaskDelete+0xd4>)
 80073d8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fc42 	bl	8007c64 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80073e0:	f000 fc74 	bl	8007ccc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80073e4:	f001 f9aa 	bl	800873c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <vTaskDelete+0xd8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01b      	beq.n	8007428 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80073f0:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <vTaskDelete+0xc4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d116      	bne.n	8007428 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <vTaskDelete+0xdc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <vTaskDelete+0xac>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60bb      	str	r3, [r7, #8]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <vTaskDelete+0xe0>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000e8c 	.word	0x20000e8c
 8007434:	2000137c 	.word	0x2000137c
 8007438:	20001334 	.word	0x20001334
 800743c:	20001348 	.word	0x20001348
 8007440:	20001360 	.word	0x20001360
 8007444:	2000136c 	.word	0x2000136c
 8007448:	20001388 	.word	0x20001388
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800745e:	463a      	mov	r2, r7
 8007460:	1d39      	adds	r1, r7, #4
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe ff2e 	bl	80062c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	9202      	str	r2, [sp, #8]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	2300      	movs	r3, #0
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	460a      	mov	r2, r1
 800747e:	4924      	ldr	r1, [pc, #144]	; (8007510 <vTaskStartScheduler+0xc0>)
 8007480:	4824      	ldr	r0, [pc, #144]	; (8007514 <vTaskStartScheduler+0xc4>)
 8007482:	f7ff fdc3 	bl	800700c <xTaskCreateStatic>
 8007486:	4603      	mov	r3, r0
 8007488:	4a23      	ldr	r2, [pc, #140]	; (8007518 <vTaskStartScheduler+0xc8>)
 800748a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800748c:	4b22      	ldr	r3, [pc, #136]	; (8007518 <vTaskStartScheduler+0xc8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e001      	b.n	800749e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d102      	bne.n	80074aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074a4:	f000 fd16 	bl	8007ed4 <xTimerCreateTimerTask>
 80074a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d11b      	bne.n	80074e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	613b      	str	r3, [r7, #16]
}
 80074c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074c4:	4b15      	ldr	r3, [pc, #84]	; (800751c <vTaskStartScheduler+0xcc>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3354      	adds	r3, #84	; 0x54
 80074ca:	4a15      	ldr	r2, [pc, #84]	; (8007520 <vTaskStartScheduler+0xd0>)
 80074cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <vTaskStartScheduler+0xd4>)
 80074d0:	f04f 32ff 	mov.w	r2, #4294967295
 80074d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <vTaskStartScheduler+0xd8>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80074dc:	4b13      	ldr	r3, [pc, #76]	; (800752c <vTaskStartScheduler+0xdc>)
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074e2:	f001 f889 	bl	80085f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074e6:	e00e      	b.n	8007506 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d10a      	bne.n	8007506 <vTaskStartScheduler+0xb6>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <vTaskStartScheduler+0xb4>
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	08008f0c 	.word	0x08008f0c
 8007514:	08007b59 	.word	0x08007b59
 8007518:	20001384 	.word	0x20001384
 800751c:	20000e8c 	.word	0x20000e8c
 8007520:	20000028 	.word	0x20000028
 8007524:	20001380 	.word	0x20001380
 8007528:	2000136c 	.word	0x2000136c
 800752c:	20001364 	.word	0x20001364

08007530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <vTaskSuspendAll+0x18>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	4a03      	ldr	r2, [pc, #12]	; (8007548 <vTaskSuspendAll+0x18>)
 800753c:	6013      	str	r3, [r2, #0]
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20001388 	.word	0x20001388

0800754c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800755a:	4b42      	ldr	r3, [pc, #264]	; (8007664 <xTaskResumeAll+0x118>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xTaskResumeAll+0x2c>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	603b      	str	r3, [r7, #0]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007578:	f001 f8b0 	bl	80086dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800757c:	4b39      	ldr	r3, [pc, #228]	; (8007664 <xTaskResumeAll+0x118>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	4a38      	ldr	r2, [pc, #224]	; (8007664 <xTaskResumeAll+0x118>)
 8007584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007586:	4b37      	ldr	r3, [pc, #220]	; (8007664 <xTaskResumeAll+0x118>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d162      	bne.n	8007654 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <xTaskResumeAll+0x11c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d05e      	beq.n	8007654 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007596:	e02f      	b.n	80075f8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007598:	4b34      	ldr	r3, [pc, #208]	; (800766c <xTaskResumeAll+0x120>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3318      	adds	r3, #24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe ff47 	bl	8006438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe ff42 	bl	8006438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <xTaskResumeAll+0x124>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <xTaskResumeAll+0x7c>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a2a      	ldr	r2, [pc, #168]	; (8007670 <xTaskResumeAll+0x124>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a27      	ldr	r2, [pc, #156]	; (8007674 <xTaskResumeAll+0x128>)
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7fe fecf 	bl	8006382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b23      	ldr	r3, [pc, #140]	; (8007678 <xTaskResumeAll+0x12c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075f2:	4b22      	ldr	r3, [pc, #136]	; (800767c <xTaskResumeAll+0x130>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f8:	4b1c      	ldr	r3, [pc, #112]	; (800766c <xTaskResumeAll+0x120>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1cb      	bne.n	8007598 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007606:	f000 fb61 	bl	8007ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800760a:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <xTaskResumeAll+0x134>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d010      	beq.n	8007638 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007616:	f000 f845 	bl	80076a4 <xTaskIncrementTick>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007620:	4b16      	ldr	r3, [pc, #88]	; (800767c <xTaskResumeAll+0x130>)
 8007622:	2201      	movs	r2, #1
 8007624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f1      	bne.n	8007616 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <xTaskResumeAll+0x134>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007638:	4b10      	ldr	r3, [pc, #64]	; (800767c <xTaskResumeAll+0x130>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007640:	2301      	movs	r3, #1
 8007642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007644:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <xTaskResumeAll+0x138>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007654:	f001 f872 	bl	800873c <vPortExitCritical>

	return xAlreadyYielded;
 8007658:	68bb      	ldr	r3, [r7, #8]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20001388 	.word	0x20001388
 8007668:	20001360 	.word	0x20001360
 800766c:	20001320 	.word	0x20001320
 8007670:	20001368 	.word	0x20001368
 8007674:	20000e90 	.word	0x20000e90
 8007678:	20000e8c 	.word	0x20000e8c
 800767c:	20001374 	.word	0x20001374
 8007680:	20001370 	.word	0x20001370
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <xTaskGetTickCount+0x18>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	20001364 	.word	0x20001364

080076a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ae:	4b51      	ldr	r3, [pc, #324]	; (80077f4 <xTaskIncrementTick+0x150>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 808e 	bne.w	80077d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076b8:	4b4f      	ldr	r3, [pc, #316]	; (80077f8 <xTaskIncrementTick+0x154>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076c0:	4a4d      	ldr	r2, [pc, #308]	; (80077f8 <xTaskIncrementTick+0x154>)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d120      	bne.n	800770e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076cc:	4b4b      	ldr	r3, [pc, #300]	; (80077fc <xTaskIncrementTick+0x158>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <xTaskIncrementTick+0x48>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	603b      	str	r3, [r7, #0]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <xTaskIncrementTick+0x46>
 80076ec:	4b43      	ldr	r3, [pc, #268]	; (80077fc <xTaskIncrementTick+0x158>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	4b43      	ldr	r3, [pc, #268]	; (8007800 <xTaskIncrementTick+0x15c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a41      	ldr	r2, [pc, #260]	; (80077fc <xTaskIncrementTick+0x158>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4a41      	ldr	r2, [pc, #260]	; (8007800 <xTaskIncrementTick+0x15c>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	4b40      	ldr	r3, [pc, #256]	; (8007804 <xTaskIncrementTick+0x160>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	4a3f      	ldr	r2, [pc, #252]	; (8007804 <xTaskIncrementTick+0x160>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	f000 fadf 	bl	8007ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800770e:	4b3e      	ldr	r3, [pc, #248]	; (8007808 <xTaskIncrementTick+0x164>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	429a      	cmp	r2, r3
 8007716:	d34e      	bcc.n	80077b6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007718:	4b38      	ldr	r3, [pc, #224]	; (80077fc <xTaskIncrementTick+0x158>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <xTaskIncrementTick+0x82>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <xTaskIncrementTick+0x84>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <xTaskIncrementTick+0x164>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	601a      	str	r2, [r3, #0]
					break;
 8007734:	e03f      	b.n	80077b6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007736:	4b31      	ldr	r3, [pc, #196]	; (80077fc <xTaskIncrementTick+0x158>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d203      	bcs.n	8007756 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800774e:	4a2e      	ldr	r2, [pc, #184]	; (8007808 <xTaskIncrementTick+0x164>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6013      	str	r3, [r2, #0]
						break;
 8007754:	e02f      	b.n	80077b6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3304      	adds	r3, #4
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fe6c 	bl	8006438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	3318      	adds	r3, #24
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe fe63 	bl	8006438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4b25      	ldr	r3, [pc, #148]	; (800780c <xTaskIncrementTick+0x168>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d903      	bls.n	8007786 <xTaskIncrementTick+0xe2>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a22      	ldr	r2, [pc, #136]	; (800780c <xTaskIncrementTick+0x168>)
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <xTaskIncrementTick+0x16c>)
 8007794:	441a      	add	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fe fdf0 	bl	8006382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <xTaskIncrementTick+0x170>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d3b3      	bcc.n	8007718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b4:	e7b0      	b.n	8007718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077b6:	4b17      	ldr	r3, [pc, #92]	; (8007814 <xTaskIncrementTick+0x170>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4914      	ldr	r1, [pc, #80]	; (8007810 <xTaskIncrementTick+0x16c>)
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d907      	bls.n	80077de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e004      	b.n	80077de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <xTaskIncrementTick+0x174>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	4a0f      	ldr	r2, [pc, #60]	; (8007818 <xTaskIncrementTick+0x174>)
 80077dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <xTaskIncrementTick+0x178>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077ea:	697b      	ldr	r3, [r7, #20]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001388 	.word	0x20001388
 80077f8:	20001364 	.word	0x20001364
 80077fc:	20001318 	.word	0x20001318
 8007800:	2000131c 	.word	0x2000131c
 8007804:	20001378 	.word	0x20001378
 8007808:	20001380 	.word	0x20001380
 800780c:	20001368 	.word	0x20001368
 8007810:	20000e90 	.word	0x20000e90
 8007814:	20000e8c 	.word	0x20000e8c
 8007818:	20001370 	.word	0x20001370
 800781c:	20001374 	.word	0x20001374

08007820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007826:	4b2a      	ldr	r3, [pc, #168]	; (80078d0 <vTaskSwitchContext+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800782e:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <vTaskSwitchContext+0xb4>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007834:	e046      	b.n	80078c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007836:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <vTaskSwitchContext+0xb4>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800783c:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <vTaskSwitchContext+0xb8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	e010      	b.n	8007866 <vTaskSwitchContext+0x46>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <vTaskSwitchContext+0x40>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <vTaskSwitchContext+0x3e>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3b01      	subs	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	491d      	ldr	r1, [pc, #116]	; (80078dc <vTaskSwitchContext+0xbc>)
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0e4      	beq.n	8007844 <vTaskSwitchContext+0x24>
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4a15      	ldr	r2, [pc, #84]	; (80078dc <vTaskSwitchContext+0xbc>)
 8007886:	4413      	add	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3308      	adds	r3, #8
 800789c:	429a      	cmp	r2, r3
 800789e:	d104      	bne.n	80078aa <vTaskSwitchContext+0x8a>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	4a0b      	ldr	r2, [pc, #44]	; (80078e0 <vTaskSwitchContext+0xc0>)
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	4a08      	ldr	r2, [pc, #32]	; (80078d8 <vTaskSwitchContext+0xb8>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <vTaskSwitchContext+0xc0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3354      	adds	r3, #84	; 0x54
 80078c0:	4a08      	ldr	r2, [pc, #32]	; (80078e4 <vTaskSwitchContext+0xc4>)
 80078c2:	6013      	str	r3, [r2, #0]
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20001388 	.word	0x20001388
 80078d4:	20001374 	.word	0x20001374
 80078d8:	20001368 	.word	0x20001368
 80078dc:	20000e90 	.word	0x20000e90
 80078e0:	20000e8c 	.word	0x20000e8c
 80078e4:	20000028 	.word	0x20000028

080078e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <vTaskPlaceOnEventList+0x44>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3318      	adds	r3, #24
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fe fd56 	bl	80063c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800791c:	2101      	movs	r1, #1
 800791e:	6838      	ldr	r0, [r7, #0]
 8007920:	f000 fa84 	bl	8007e2c <prvAddCurrentTaskToDelayedList>
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000e8c 	.word	0x20000e8c

08007930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	617b      	str	r3, [r7, #20]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vTaskPlaceOnEventListRestricted+0x54>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3318      	adds	r3, #24
 800795e:	4619      	mov	r1, r3
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7fe fd0e 	bl	8006382 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800796c:	f04f 33ff 	mov.w	r3, #4294967295
 8007970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68b8      	ldr	r0, [r7, #8]
 8007976:	f000 fa59 	bl	8007e2c <prvAddCurrentTaskToDelayedList>
	}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000e8c 	.word	0x20000e8c

08007988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3318      	adds	r3, #24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fd3d 	bl	8006438 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079be:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <xTaskRemoveFromEventList+0xb0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d11d      	bne.n	8007a02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fd34 	bl	8006438 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <xTaskRemoveFromEventList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <xTaskRemoveFromEventList+0x5c>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <xTaskRemoveFromEventList+0xb4>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <xTaskRemoveFromEventList+0xb8>)
 80079f2:	441a      	add	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fcc1 	bl	8006382 <vListInsertEnd>
 8007a00:	e005      	b.n	8007a0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3318      	adds	r3, #24
 8007a06:	4619      	mov	r1, r3
 8007a08:	480e      	ldr	r0, [pc, #56]	; (8007a44 <xTaskRemoveFromEventList+0xbc>)
 8007a0a:	f7fe fcba 	bl	8006382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <xTaskRemoveFromEventList+0xc0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d905      	bls.n	8007a28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <xTaskRemoveFromEventList+0xc4>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e001      	b.n	8007a2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007a2c:	697b      	ldr	r3, [r7, #20]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001388 	.word	0x20001388
 8007a3c:	20001368 	.word	0x20001368
 8007a40:	20000e90 	.word	0x20000e90
 8007a44:	20001320 	.word	0x20001320
 8007a48:	20000e8c 	.word	0x20000e8c
 8007a4c:	20001374 	.word	0x20001374

08007a50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <vTaskInternalSetTimeOutState+0x24>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <vTaskInternalSetTimeOutState+0x28>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20001378 	.word	0x20001378
 8007a78:	20001364 	.word	0x20001364

08007a7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	613b      	str	r3, [r7, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007abe:	f000 fe0d 	bl	80086dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <xTaskCheckForTimeOut+0xbc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d102      	bne.n	8007ae2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	e023      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <xTaskCheckForTimeOut+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d007      	beq.n	8007afe <xTaskCheckForTimeOut+0x82>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d302      	bcc.n	8007afe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	e015      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d20b      	bcs.n	8007b20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff ff9b 	bl	8007a50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e004      	b.n	8007b2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b2a:	f000 fe07 	bl	800873c <vPortExitCritical>

	return xReturn;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20001364 	.word	0x20001364
 8007b3c:	20001378 	.word	0x20001378

08007b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <vTaskMissedYield+0x14>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20001374 	.word	0x20001374

08007b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b60:	f000 f852 	bl	8007c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <prvIdleTask+0x28>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d9f9      	bls.n	8007b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <prvIdleTask+0x2c>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b7c:	e7f0      	b.n	8007b60 <prvIdleTask+0x8>
 8007b7e:	bf00      	nop
 8007b80:	20000e90 	.word	0x20000e90
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	e00c      	b.n	8007bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <prvInitialiseTaskLists+0x60>)
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fbc2 	bl	800632c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3301      	adds	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b37      	cmp	r3, #55	; 0x37
 8007bb2:	d9ef      	bls.n	8007b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bb4:	480d      	ldr	r0, [pc, #52]	; (8007bec <prvInitialiseTaskLists+0x64>)
 8007bb6:	f7fe fbb9 	bl	800632c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <prvInitialiseTaskLists+0x68>)
 8007bbc:	f7fe fbb6 	bl	800632c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bc0:	480c      	ldr	r0, [pc, #48]	; (8007bf4 <prvInitialiseTaskLists+0x6c>)
 8007bc2:	f7fe fbb3 	bl	800632c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bc6:	480c      	ldr	r0, [pc, #48]	; (8007bf8 <prvInitialiseTaskLists+0x70>)
 8007bc8:	f7fe fbb0 	bl	800632c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bcc:	480b      	ldr	r0, [pc, #44]	; (8007bfc <prvInitialiseTaskLists+0x74>)
 8007bce:	f7fe fbad 	bl	800632c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <prvInitialiseTaskLists+0x78>)
 8007bd4:	4a05      	ldr	r2, [pc, #20]	; (8007bec <prvInitialiseTaskLists+0x64>)
 8007bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <prvInitialiseTaskLists+0x7c>)
 8007bda:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <prvInitialiseTaskLists+0x68>)
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000e90 	.word	0x20000e90
 8007bec:	200012f0 	.word	0x200012f0
 8007bf0:	20001304 	.word	0x20001304
 8007bf4:	20001320 	.word	0x20001320
 8007bf8:	20001334 	.word	0x20001334
 8007bfc:	2000134c 	.word	0x2000134c
 8007c00:	20001318 	.word	0x20001318
 8007c04:	2000131c 	.word	0x2000131c

08007c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c0e:	e019      	b.n	8007c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c10:	f000 fd64 	bl	80086dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007c14:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <prvCheckTasksWaitingTermination+0x50>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe fc09 	bl	8006438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c26:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <prvCheckTasksWaitingTermination+0x54>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a0b      	ldr	r2, [pc, #44]	; (8007c5c <prvCheckTasksWaitingTermination+0x54>)
 8007c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c3a:	f000 fd7f 	bl	800873c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f810 	bl	8007c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <prvCheckTasksWaitingTermination+0x58>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e1      	bne.n	8007c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20001334 	.word	0x20001334
 8007c5c:	20001360 	.word	0x20001360
 8007c60:	20001348 	.word	0x20001348

08007c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3354      	adds	r3, #84	; 0x54
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f855 	bl	8008d20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 feed 	bl	8008a64 <vPortFree>
				vPortFree( pxTCB );
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 feea 	bl	8008a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c90:	e018      	b.n	8007cc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d103      	bne.n	8007ca4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fee1 	bl	8008a64 <vPortFree>
	}
 8007ca2:	e00f      	b.n	8007cc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d00a      	beq.n	8007cc4 <prvDeleteTCB+0x60>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	60fb      	str	r3, [r7, #12]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <prvDeleteTCB+0x5e>
	}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <prvResetNextTaskUnblockTime+0x40>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <prvResetNextTaskUnblockTime+0x14>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e000      	b.n	8007ce2 <prvResetNextTaskUnblockTime+0x16>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <prvResetNextTaskUnblockTime+0x44>)
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cee:	e008      	b.n	8007d02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <prvResetNextTaskUnblockTime+0x40>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4a04      	ldr	r2, [pc, #16]	; (8007d10 <prvResetNextTaskUnblockTime+0x44>)
 8007d00:	6013      	str	r3, [r2, #0]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	20001318 	.word	0x20001318
 8007d10:	20001380 	.word	0x20001380

08007d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <xTaskGetSchedulerState+0x34>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d22:	2301      	movs	r3, #1
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	e008      	b.n	8007d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d28:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <xTaskGetSchedulerState+0x38>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d30:	2302      	movs	r3, #2
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	e001      	b.n	8007d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d3a:	687b      	ldr	r3, [r7, #4]
	}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	2000136c 	.word	0x2000136c
 8007d4c:	20001388 	.word	0x20001388

08007d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d056      	beq.n	8007e14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d66:	4b2e      	ldr	r3, [pc, #184]	; (8007e20 <xTaskPriorityDisinherit+0xd0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d00a      	beq.n	8007d86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60bb      	str	r3, [r7, #8]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d02c      	beq.n	8007e14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d128      	bne.n	8007e14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fb36 	bl	8006438 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <xTaskPriorityDisinherit+0xd4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <xTaskPriorityDisinherit+0xa4>
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a0c      	ldr	r2, [pc, #48]	; (8007e24 <xTaskPriorityDisinherit+0xd4>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <xTaskPriorityDisinherit+0xd8>)
 8007e02:	441a      	add	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe fab9 	bl	8006382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e14:	697b      	ldr	r3, [r7, #20]
	}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000e8c 	.word	0x20000e8c
 8007e24:	20001368 	.word	0x20001368
 8007e28:	20000e90 	.word	0x20000e90

08007e2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e36:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <prvAddCurrentTaskToDelayedList+0x90>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e3c:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe faf8 	bl	8006438 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4e:	d10a      	bne.n	8007e66 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e56:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4819      	ldr	r0, [pc, #100]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e60:	f7fe fa8f 	bl	8006382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e64:	e026      	b.n	8007eb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e6e:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d209      	bcs.n	8007e92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3304      	adds	r3, #4
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	f7fe fa9c 	bl	80063c8 <vListInsert>
}
 8007e90:	e010      	b.n	8007eb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f7fe fa92 	bl	80063c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d202      	bcs.n	8007eb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007eae:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	6013      	str	r3, [r2, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20001364 	.word	0x20001364
 8007ec0:	20000e8c 	.word	0x20000e8c
 8007ec4:	2000134c 	.word	0x2000134c
 8007ec8:	2000131c 	.word	0x2000131c
 8007ecc:	20001318 	.word	0x20001318
 8007ed0:	20001380 	.word	0x20001380

08007ed4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ede:	f000 facb 	bl	8008478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <xTimerCreateTimerTask+0x80>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d021      	beq.n	8007f2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ef2:	1d3a      	adds	r2, r7, #4
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe f9fb 	bl	80062f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	9202      	str	r2, [sp, #8]
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	2300      	movs	r3, #0
 8007f12:	460a      	mov	r2, r1
 8007f14:	4910      	ldr	r1, [pc, #64]	; (8007f58 <xTimerCreateTimerTask+0x84>)
 8007f16:	4811      	ldr	r0, [pc, #68]	; (8007f5c <xTimerCreateTimerTask+0x88>)
 8007f18:	f7ff f878 	bl	800700c <xTaskCreateStatic>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <xTimerCreateTimerTask+0x8c>)
 8007f20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <xTimerCreateTimerTask+0x8c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	613b      	str	r3, [r7, #16]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f4a:	697b      	ldr	r3, [r7, #20]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200013bc 	.word	0x200013bc
 8007f58:	08008f14 	.word	0x08008f14
 8007f5c:	08008081 	.word	0x08008081
 8007f60:	200013c0 	.word	0x200013c0

08007f64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	623b      	str	r3, [r7, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <xTimerGenericCommand+0x98>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d02a      	beq.n	8007ff0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	dc18      	bgt.n	8007fde <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fac:	f7ff feb2 	bl	8007d14 <xTaskGetSchedulerState>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d109      	bne.n	8007fca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fb6:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <xTimerGenericCommand+0x98>)
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f107 0110 	add.w	r1, r7, #16
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	f7fe fb65 	bl	8006690 <xQueueGenericSend>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fc8:	e012      	b.n	8007ff0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fca:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <xTimerGenericCommand+0x98>)
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f107 0110 	add.w	r1, r7, #16
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f7fe fb5b 	bl	8006690 <xQueueGenericSend>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
 8007fdc:	e008      	b.n	8007ff0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fde:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <xTimerGenericCommand+0x98>)
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	f107 0110 	add.w	r1, r7, #16
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	f7fe fc4f 	bl	800688c <xQueueGenericSendFromISR>
 8007fee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3728      	adds	r7, #40	; 0x28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200013bc 	.word	0x200013bc

08008000 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800800a:	4b1c      	ldr	r3, [pc, #112]	; (800807c <prvProcessExpiredTimer+0x7c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe fa0d 	bl	8006438 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d122      	bne.n	800806c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	18d1      	adds	r1, r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	6978      	ldr	r0, [r7, #20]
 8008034:	f000 f8c8 	bl	80081c8 <prvInsertTimerInActiveList>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800803e:	2300      	movs	r3, #0
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	2300      	movs	r3, #0
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	2100      	movs	r1, #0
 8008048:	6978      	ldr	r0, [r7, #20]
 800804a:	f7ff ff8b 	bl	8007f64 <xTimerGenericCommand>
 800804e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	6978      	ldr	r0, [r7, #20]
 8008072:	4798      	blx	r3
}
 8008074:	bf00      	nop
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	200013b4 	.word	0x200013b4

08008080 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008088:	f107 0308 	add.w	r3, r7, #8
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f857 	bl	8008140 <prvGetNextExpireTime>
 8008092:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f803 	bl	80080a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800809e:	f000 f8d5 	bl	800824c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080a2:	e7f1      	b.n	8008088 <prvTimerTask+0x8>

080080a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ae:	f7ff fa3f 	bl	8007530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080b2:	f107 0308 	add.w	r3, r7, #8
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f866 	bl	8008188 <prvSampleTimeNow>
 80080bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d130      	bne.n	8008126 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <prvProcessTimerOrBlockTask+0x3c>
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d806      	bhi.n	80080e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080d2:	f7ff fa3b 	bl	800754c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff91 	bl	8008000 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080de:	e024      	b.n	800812a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <prvProcessTimerOrBlockTask+0x90>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf0c      	ite	eq
 80080f0:	2301      	moveq	r3, #1
 80080f2:	2300      	movne	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <prvProcessTimerOrBlockTask+0x94>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	f7fe ff4d 	bl	8006fa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800810a:	f7ff fa1f 	bl	800754c <xTaskResumeAll>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008114:	4b09      	ldr	r3, [pc, #36]	; (800813c <prvProcessTimerOrBlockTask+0x98>)
 8008116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	f3bf 8f6f 	isb	sy
}
 8008124:	e001      	b.n	800812a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008126:	f7ff fa11 	bl	800754c <xTaskResumeAll>
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200013b8 	.word	0x200013b8
 8008138:	200013bc 	.word	0x200013bc
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008148:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <prvGetNextExpireTime+0x44>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bf0c      	ite	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	2300      	movne	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008166:	4b07      	ldr	r3, [pc, #28]	; (8008184 <prvGetNextExpireTime+0x44>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e001      	b.n	8008176 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008176:	68fb      	ldr	r3, [r7, #12]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	200013b4 	.word	0x200013b4

08008188 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008190:	f7ff fa7a 	bl	8007688 <xTaskGetTickCount>
 8008194:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <prvSampleTimeNow+0x3c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	429a      	cmp	r2, r3
 800819e:	d205      	bcs.n	80081ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081a0:	f000 f908 	bl	80083b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081b2:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <prvSampleTimeNow+0x3c>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081b8:	68fb      	ldr	r3, [r7, #12]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	200013c4 	.word	0x200013c4

080081c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d812      	bhi.n	8008214 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d302      	bcc.n	8008202 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e01b      	b.n	800823a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <prvInsertTimerInActiveList+0x7c>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3304      	adds	r3, #4
 800820a:	4619      	mov	r1, r3
 800820c:	4610      	mov	r0, r2
 800820e:	f7fe f8db 	bl	80063c8 <vListInsert>
 8008212:	e012      	b.n	800823a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d206      	bcs.n	800822a <prvInsertTimerInActiveList+0x62>
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e007      	b.n	800823a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800822a:	4b07      	ldr	r3, [pc, #28]	; (8008248 <prvInsertTimerInActiveList+0x80>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3304      	adds	r3, #4
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f7fe f8c7 	bl	80063c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200013b8 	.word	0x200013b8
 8008248:	200013b4 	.word	0x200013b4

0800824c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08e      	sub	sp, #56	; 0x38
 8008250:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008252:	e09d      	b.n	8008390 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	da18      	bge.n	800828c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800825a:	1d3b      	adds	r3, r7, #4
 800825c:	3304      	adds	r3, #4
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	61fb      	str	r3, [r7, #28]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008282:	6850      	ldr	r0, [r2, #4]
 8008284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008286:	6892      	ldr	r2, [r2, #8]
 8008288:	4611      	mov	r1, r2
 800828a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	db7d      	blt.n	800838e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe f8c8 	bl	8006438 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082a8:	463b      	mov	r3, r7
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff ff6c 	bl	8008188 <prvSampleTimeNow>
 80082b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	d86b      	bhi.n	8008390 <prvProcessReceivedCommands+0x144>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <prvProcessReceivedCommands+0x74>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	08008391 	.word	0x08008391
 80082d0:	08008345 	.word	0x08008345
 80082d4:	0800837d 	.word	0x0800837d
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082e9 	.word	0x080082e9
 80082e0:	08008391 	.word	0x08008391
 80082e4:	08008345 	.word	0x08008345
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	18d1      	adds	r1, r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f6:	f7ff ff67 	bl	80081c8 <prvInsertTimerInActiveList>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d047      	beq.n	8008390 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008306:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d13f      	bne.n	8008390 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	441a      	add	r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	2100      	movs	r1, #0
 8008320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008322:	f7ff fe1f 	bl	8007f64 <xTimerGenericCommand>
 8008326:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d130      	bne.n	8008390 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	61bb      	str	r3, [r7, #24]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	617b      	str	r3, [r7, #20]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	18d1      	adds	r1, r2, r3
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008376:	f7ff ff27 	bl	80081c8 <prvInsertTimerInActiveList>
					break;
 800837a:	e009      	b.n	8008390 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008388:	f000 fb6c 	bl	8008a64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800838c:	e000      	b.n	8008390 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800838e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <prvProcessReceivedCommands+0x164>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	1d39      	adds	r1, r7, #4
 8008396:	2200      	movs	r2, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fb9d 	bl	8006ad8 <xQueueReceive>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f47f af57 	bne.w	8008254 <prvProcessReceivedCommands+0x8>
	}
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	3730      	adds	r7, #48	; 0x30
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200013bc 	.word	0x200013bc

080083b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ba:	e045      	b.n	8008448 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083bc:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <prvSwitchTimerLists+0xbc>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083c6:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <prvSwitchTimerLists+0xbc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe f82f 	bl	8006438 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d12e      	bne.n	8008448 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4413      	add	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d90e      	bls.n	800841a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <prvSwitchTimerLists+0xbc>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fd ffd8 	bl	80063c8 <vListInsert>
 8008418:	e016      	b.n	8008448 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800841a:	2300      	movs	r3, #0
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	2100      	movs	r1, #0
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff fd9d 	bl	8007f64 <xTimerGenericCommand>
 800842a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	603b      	str	r3, [r7, #0]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <prvSwitchTimerLists+0xbc>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1b4      	bne.n	80083bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008452:	4b07      	ldr	r3, [pc, #28]	; (8008470 <prvSwitchTimerLists+0xbc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <prvSwitchTimerLists+0xc0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a04      	ldr	r2, [pc, #16]	; (8008470 <prvSwitchTimerLists+0xbc>)
 800845e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008460:	4a04      	ldr	r2, [pc, #16]	; (8008474 <prvSwitchTimerLists+0xc0>)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6013      	str	r3, [r2, #0]
}
 8008466:	bf00      	nop
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200013b4 	.word	0x200013b4
 8008474:	200013b8 	.word	0x200013b8

08008478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800847e:	f000 f92d 	bl	80086dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <prvCheckForValidListAndQueue+0x60>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d120      	bne.n	80084cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800848a:	4814      	ldr	r0, [pc, #80]	; (80084dc <prvCheckForValidListAndQueue+0x64>)
 800848c:	f7fd ff4e 	bl	800632c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008490:	4813      	ldr	r0, [pc, #76]	; (80084e0 <prvCheckForValidListAndQueue+0x68>)
 8008492:	f7fd ff4b 	bl	800632c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008496:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <prvCheckForValidListAndQueue+0x6c>)
 8008498:	4a10      	ldr	r2, [pc, #64]	; (80084dc <prvCheckForValidListAndQueue+0x64>)
 800849a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800849c:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <prvCheckForValidListAndQueue+0x70>)
 800849e:	4a10      	ldr	r2, [pc, #64]	; (80084e0 <prvCheckForValidListAndQueue+0x68>)
 80084a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <prvCheckForValidListAndQueue+0x74>)
 80084a8:	4a11      	ldr	r2, [pc, #68]	; (80084f0 <prvCheckForValidListAndQueue+0x78>)
 80084aa:	2110      	movs	r1, #16
 80084ac:	200a      	movs	r0, #10
 80084ae:	f7fe f855 	bl	800655c <xQueueGenericCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a08      	ldr	r2, [pc, #32]	; (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	490b      	ldr	r1, [pc, #44]	; (80084f4 <prvCheckForValidListAndQueue+0x7c>)
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fd1a 	bl	8006f00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084cc:	f000 f936 	bl	800873c <vPortExitCritical>
}
 80084d0:	bf00      	nop
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200013bc 	.word	0x200013bc
 80084dc:	2000138c 	.word	0x2000138c
 80084e0:	200013a0 	.word	0x200013a0
 80084e4:	200013b4 	.word	0x200013b4
 80084e8:	200013b8 	.word	0x200013b8
 80084ec:	20001468 	.word	0x20001468
 80084f0:	200013c8 	.word	0x200013c8
 80084f4:	08008f1c 	.word	0x08008f1c

080084f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3b04      	subs	r3, #4
 8008508:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b04      	subs	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3b04      	subs	r3, #4
 8008526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008528:	4a08      	ldr	r2, [pc, #32]	; (800854c <pxPortInitialiseStack+0x54>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3b14      	subs	r3, #20
 8008532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3b20      	subs	r3, #32
 800853e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	08008551 	.word	0x08008551

08008550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <prvTaskExitError+0x54>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d00a      	beq.n	800857a <prvTaskExitError+0x2a>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60fb      	str	r3, [r7, #12]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <prvTaskExitError+0x28>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	60bb      	str	r3, [r7, #8]
}
 800858c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800858e:	bf00      	nop
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0fc      	beq.n	8008590 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000024 	.word	0x20000024
	...

080085b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <pxCurrentTCBConst2>)
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	6808      	ldr	r0, [r1, #0]
 80085b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085ba:	f380 8809 	msr	PSP, r0
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f04f 0000 	mov.w	r0, #0
 80085c6:	f380 8811 	msr	BASEPRI, r0
 80085ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80085ce:	4770      	bx	lr

080085d0 <pxCurrentTCBConst2>:
 80085d0:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80085d8:	4806      	ldr	r0, [pc, #24]	; (80085f4 <prvPortStartFirstTask+0x1c>)
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f380 8808 	msr	MSP, r0
 80085e2:	b662      	cpsie	i
 80085e4:	b661      	cpsie	f
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	df00      	svc	0
 80085f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085f2:	bf00      	nop
 80085f4:	e000ed08 	.word	0xe000ed08

080085f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085fe:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <xPortStartScheduler+0xd0>)
 8008600:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008620:	b2da      	uxtb	r2, r3
 8008622:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <xPortStartScheduler+0xd4>)
 8008624:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008626:	4b2a      	ldr	r3, [pc, #168]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008628:	2207      	movs	r2, #7
 800862a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800862c:	e009      	b.n	8008642 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800862e:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3b01      	subs	r3, #1
 8008634:	4a26      	ldr	r2, [pc, #152]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008636:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d0ef      	beq.n	800862e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800864e:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1c3 0307 	rsb	r3, r3, #7
 8008656:	2b04      	cmp	r3, #4
 8008658:	d00a      	beq.n	8008670 <xPortStartScheduler+0x78>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	60bb      	str	r3, [r7, #8]
}
 800866c:	bf00      	nop
 800866e:	e7fe      	b.n	800866e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008670:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008678:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800867a:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <xPortStartScheduler+0xd8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008682:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <xPortStartScheduler+0xd8>)
 8008684:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800868e:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <xPortStartScheduler+0xdc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a10      	ldr	r2, [pc, #64]	; (80086d4 <xPortStartScheduler+0xdc>)
 8008694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <xPortStartScheduler+0xdc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a0d      	ldr	r2, [pc, #52]	; (80086d4 <xPortStartScheduler+0xdc>)
 80086a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086a6:	f000 f8b9 	bl	800881c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086aa:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <xPortStartScheduler+0xe0>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086b0:	f7ff ff92 	bl	80085d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086b4:	f7ff f8b4 	bl	8007820 <vTaskSwitchContext>
	prvTaskExitError();
 80086b8:	f7ff ff4a 	bl	8008550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	e000e400 	.word	0xe000e400
 80086cc:	200014b8 	.word	0x200014b8
 80086d0:	200014bc 	.word	0x200014bc
 80086d4:	e000ed20 	.word	0xe000ed20
 80086d8:	20000024 	.word	0x20000024

080086dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	607b      	str	r3, [r7, #4]
}
 80086f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <vPortEnterCritical+0x58>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a0d      	ldr	r2, [pc, #52]	; (8008734 <vPortEnterCritical+0x58>)
 80086fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <vPortEnterCritical+0x58>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d10f      	bne.n	8008728 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008708:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <vPortEnterCritical+0x5c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <vPortEnterCritical+0x4c>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	603b      	str	r3, [r7, #0]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <vPortEnterCritical+0x4a>
	}
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000024 	.word	0x20000024
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <vPortExitCritical+0x4c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <vPortExitCritical+0x24>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008760:	4b09      	ldr	r3, [pc, #36]	; (8008788 <vPortExitCritical+0x4c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3b01      	subs	r3, #1
 8008766:	4a08      	ldr	r2, [pc, #32]	; (8008788 <vPortExitCritical+0x4c>)
 8008768:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <vPortExitCritical+0x4c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <vPortExitCritical+0x42>
 8008772:	2300      	movs	r3, #0
 8008774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f383 8811 	msr	BASEPRI, r3
}
 800877c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	20000024 	.word	0x20000024
 800878c:	00000000 	.word	0x00000000

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087a0:	6010      	str	r0, [r2, #0]
 80087a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087aa:	f380 8811 	msr	BASEPRI, r0
 80087ae:	f7ff f837 	bl	8007820 <vTaskSwitchContext>
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	f380 8811 	msr	BASEPRI, r0
 80087ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	6808      	ldr	r0, [r1, #0]
 80087c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087c6:	f380 8809 	msr	PSP, r0
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	4770      	bx	lr

080087d0 <pxCurrentTCBConst>:
 80087d0:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087f2:	f7fe ff57 	bl	80076a4 <xTaskIncrementTick>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <SysTick_Handler+0x40>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f383 8811 	msr	BASEPRI, r3
}
 800880e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <vPortSetupTimerInterrupt+0x30>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <vPortSetupTimerInterrupt+0x38>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a09      	ldr	r2, [pc, #36]	; (8008858 <vPortSetupTimerInterrupt+0x3c>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	4a08      	ldr	r2, [pc, #32]	; (800885c <vPortSetupTimerInterrupt+0x40>)
 800883a:	3b01      	subs	r3, #1
 800883c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800883e:	4b03      	ldr	r3, [pc, #12]	; (800884c <vPortSetupTimerInterrupt+0x30>)
 8008840:	2207      	movs	r2, #7
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	e000e010 	.word	0xe000e010
 8008850:	e000e018 	.word	0xe000e018
 8008854:	20000000 	.word	0x20000000
 8008858:	10624dd3 	.word	0x10624dd3
 800885c:	e000e014 	.word	0xe000e014

08008860 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b0f      	cmp	r3, #15
 8008870:	d914      	bls.n	800889c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008872:	4a16      	ldr	r2, [pc, #88]	; (80088cc <vPortValidateInterruptPriority+0x6c>)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <vPortValidateInterruptPriority+0x70>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	7afa      	ldrb	r2, [r7, #11]
 8008882:	429a      	cmp	r2, r3
 8008884:	d20a      	bcs.n	800889c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	607b      	str	r3, [r7, #4]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <vPortValidateInterruptPriority+0x74>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <vPortValidateInterruptPriority+0x78>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d90a      	bls.n	80088c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	603b      	str	r3, [r7, #0]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <vPortValidateInterruptPriority+0x60>
	}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	e000e3f0 	.word	0xe000e3f0
 80088d0:	200014b8 	.word	0x200014b8
 80088d4:	e000ed0c 	.word	0xe000ed0c
 80088d8:	200014bc 	.word	0x200014bc

080088dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088e8:	f7fe fe22 	bl	8007530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088ec:	4b58      	ldr	r3, [pc, #352]	; (8008a50 <pvPortMalloc+0x174>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f4:	f000 f910 	bl	8008b18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088f8:	4b56      	ldr	r3, [pc, #344]	; (8008a54 <pvPortMalloc+0x178>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 808e 	bne.w	8008a22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01d      	beq.n	8008948 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800890c:	2208      	movs	r2, #8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d014      	beq.n	8008948 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	3308      	adds	r3, #8
 8008926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <pvPortMalloc+0x6c>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	617b      	str	r3, [r7, #20]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d069      	beq.n	8008a22 <pvPortMalloc+0x146>
 800894e:	4b42      	ldr	r3, [pc, #264]	; (8008a58 <pvPortMalloc+0x17c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d864      	bhi.n	8008a22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008958:	4b40      	ldr	r3, [pc, #256]	; (8008a5c <pvPortMalloc+0x180>)
 800895a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800895c:	4b3f      	ldr	r3, [pc, #252]	; (8008a5c <pvPortMalloc+0x180>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008962:	e004      	b.n	800896e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <pvPortMalloc+0xa4>
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f1      	bne.n	8008964 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008980:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <pvPortMalloc+0x174>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008986:	429a      	cmp	r2, r3
 8008988:	d04b      	beq.n	8008a22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2208      	movs	r2, #8
 8008990:	4413      	add	r3, r2
 8008992:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	1ad2      	subs	r2, r2, r3
 80089a4:	2308      	movs	r3, #8
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d91f      	bls.n	80089ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <pvPortMalloc+0xf8>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	613b      	str	r3, [r7, #16]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f000 f8f8 	bl	8008bdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <pvPortMalloc+0x17c>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <pvPortMalloc+0x17c>)
 80089f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <pvPortMalloc+0x17c>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <pvPortMalloc+0x184>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d203      	bcs.n	8008a0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <pvPortMalloc+0x17c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <pvPortMalloc+0x184>)
 8008a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <pvPortMalloc+0x178>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a22:	f7fe fd93 	bl	800754c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <pvPortMalloc+0x16a>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <pvPortMalloc+0x168>
	return pvReturn;
 8008a46:	69fb      	ldr	r3, [r7, #28]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	; 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	200020c8 	.word	0x200020c8
 8008a54:	200020d4 	.word	0x200020d4
 8008a58:	200020cc 	.word	0x200020cc
 8008a5c:	200020c0 	.word	0x200020c0
 8008a60:	200020d0 	.word	0x200020d0

08008a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d048      	beq.n	8008b08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a76:	2308      	movs	r3, #8
 8008a78:	425b      	negs	r3, r3
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <vPortFree+0xac>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vPortFree+0x44>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <vPortFree+0x62>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60bb      	str	r3, [r7, #8]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <vPortFree+0xac>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d019      	beq.n	8008b08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d115      	bne.n	8008b08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <vPortFree+0xac>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	401a      	ands	r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aec:	f7fe fd20 	bl	8007530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <vPortFree+0xb0>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4413      	add	r3, r2
 8008afa:	4a06      	ldr	r2, [pc, #24]	; (8008b14 <vPortFree+0xb0>)
 8008afc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008afe:	6938      	ldr	r0, [r7, #16]
 8008b00:	f000 f86c 	bl	8008bdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b04:	f7fe fd22 	bl	800754c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b08:	bf00      	nop
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	200020d4 	.word	0x200020d4
 8008b14:	200020cc 	.word	0x200020cc

08008b18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b24:	4b27      	ldr	r3, [pc, #156]	; (8008bc4 <prvHeapInit+0xac>)
 8008b26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3307      	adds	r3, #7
 8008b36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	4a1f      	ldr	r2, [pc, #124]	; (8008bc4 <prvHeapInit+0xac>)
 8008b48:	4413      	add	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b50:	4a1d      	ldr	r2, [pc, #116]	; (8008bc8 <prvHeapInit+0xb0>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <prvHeapInit+0xb0>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b64:	2208      	movs	r2, #8
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <prvHeapInit+0xb4>)
 8008b78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b7a:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <prvHeapInit+0xb4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <prvHeapInit+0xb4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	1ad2      	subs	r2, r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <prvHeapInit+0xb4>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a0a      	ldr	r2, [pc, #40]	; (8008bd0 <prvHeapInit+0xb8>)
 8008ba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a09      	ldr	r2, [pc, #36]	; (8008bd4 <prvHeapInit+0xbc>)
 8008bae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <prvHeapInit+0xc0>)
 8008bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb6:	601a      	str	r2, [r3, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	200014c0 	.word	0x200014c0
 8008bc8:	200020c0 	.word	0x200020c0
 8008bcc:	200020c8 	.word	0x200020c8
 8008bd0:	200020d0 	.word	0x200020d0
 8008bd4:	200020cc 	.word	0x200020cc
 8008bd8:	200020d4 	.word	0x200020d4

08008bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be4:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <prvInsertBlockIntoFreeList+0xa8>)
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e002      	b.n	8008bf0 <prvInsertBlockIntoFreeList+0x14>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d8f7      	bhi.n	8008bea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	4413      	add	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d108      	bne.n	8008c1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	441a      	add	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d118      	bne.n	8008c64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <prvInsertBlockIntoFreeList+0xac>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d00d      	beq.n	8008c5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	441a      	add	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e008      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <prvInsertBlockIntoFreeList+0xac>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	e003      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d002      	beq.n	8008c7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr
 8008c84:	200020c0 	.word	0x200020c0
 8008c88:	200020c8 	.word	0x200020c8

08008c8c <__libc_init_array>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	2600      	movs	r6, #0
 8008c90:	4d0c      	ldr	r5, [pc, #48]	; (8008cc4 <__libc_init_array+0x38>)
 8008c92:	4c0d      	ldr	r4, [pc, #52]	; (8008cc8 <__libc_init_array+0x3c>)
 8008c94:	1b64      	subs	r4, r4, r5
 8008c96:	10a4      	asrs	r4, r4, #2
 8008c98:	42a6      	cmp	r6, r4
 8008c9a:	d109      	bne.n	8008cb0 <__libc_init_array+0x24>
 8008c9c:	f000 f8f0 	bl	8008e80 <_init>
 8008ca0:	2600      	movs	r6, #0
 8008ca2:	4d0a      	ldr	r5, [pc, #40]	; (8008ccc <__libc_init_array+0x40>)
 8008ca4:	4c0a      	ldr	r4, [pc, #40]	; (8008cd0 <__libc_init_array+0x44>)
 8008ca6:	1b64      	subs	r4, r4, r5
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	42a6      	cmp	r6, r4
 8008cac:	d105      	bne.n	8008cba <__libc_init_array+0x2e>
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb4:	4798      	blx	r3
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7ee      	b.n	8008c98 <__libc_init_array+0xc>
 8008cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cbe:	4798      	blx	r3
 8008cc0:	3601      	adds	r6, #1
 8008cc2:	e7f2      	b.n	8008caa <__libc_init_array+0x1e>
 8008cc4:	08009864 	.word	0x08009864
 8008cc8:	08009864 	.word	0x08009864
 8008ccc:	08009864 	.word	0x08009864
 8008cd0:	08009868 	.word	0x08009868

08008cd4 <__retarget_lock_acquire_recursive>:
 8008cd4:	4770      	bx	lr

08008cd6 <__retarget_lock_release_recursive>:
 8008cd6:	4770      	bx	lr

08008cd8 <memcpy>:
 8008cd8:	440a      	add	r2, r1
 8008cda:	4291      	cmp	r1, r2
 8008cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ce0:	d100      	bne.n	8008ce4 <memcpy+0xc>
 8008ce2:	4770      	bx	lr
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cea:	4291      	cmp	r1, r2
 8008cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf0:	d1f9      	bne.n	8008ce6 <memcpy+0xe>
 8008cf2:	bd10      	pop	{r4, pc}

08008cf4 <memset>:
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4402      	add	r2, r0
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <memset+0xa>
 8008cfc:	4770      	bx	lr
 8008cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008d02:	e7f9      	b.n	8008cf8 <memset+0x4>

08008d04 <cleanup_glue>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	460c      	mov	r4, r1
 8008d08:	6809      	ldr	r1, [r1, #0]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	b109      	cbz	r1, 8008d12 <cleanup_glue+0xe>
 8008d0e:	f7ff fff9 	bl	8008d04 <cleanup_glue>
 8008d12:	4621      	mov	r1, r4
 8008d14:	4628      	mov	r0, r5
 8008d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d1a:	f000 b869 	b.w	8008df0 <_free_r>
	...

08008d20 <_reclaim_reent>:
 8008d20:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <_reclaim_reent+0xb4>)
 8008d22:	b570      	push	{r4, r5, r6, lr}
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4604      	mov	r4, r0
 8008d28:	4283      	cmp	r3, r0
 8008d2a:	d051      	beq.n	8008dd0 <_reclaim_reent+0xb0>
 8008d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d2e:	b143      	cbz	r3, 8008d42 <_reclaim_reent+0x22>
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d14a      	bne.n	8008dcc <_reclaim_reent+0xac>
 8008d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	b111      	cbz	r1, 8008d42 <_reclaim_reent+0x22>
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 f857 	bl	8008df0 <_free_r>
 8008d42:	6961      	ldr	r1, [r4, #20]
 8008d44:	b111      	cbz	r1, 8008d4c <_reclaim_reent+0x2c>
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f852 	bl	8008df0 <_free_r>
 8008d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d4e:	b111      	cbz	r1, 8008d56 <_reclaim_reent+0x36>
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 f84d 	bl	8008df0 <_free_r>
 8008d56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d58:	b111      	cbz	r1, 8008d60 <_reclaim_reent+0x40>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f848 	bl	8008df0 <_free_r>
 8008d60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d62:	b111      	cbz	r1, 8008d6a <_reclaim_reent+0x4a>
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 f843 	bl	8008df0 <_free_r>
 8008d6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d6c:	b111      	cbz	r1, 8008d74 <_reclaim_reent+0x54>
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 f83e 	bl	8008df0 <_free_r>
 8008d74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008d76:	b111      	cbz	r1, 8008d7e <_reclaim_reent+0x5e>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f839 	bl	8008df0 <_free_r>
 8008d7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008d80:	b111      	cbz	r1, 8008d88 <_reclaim_reent+0x68>
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f834 	bl	8008df0 <_free_r>
 8008d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8a:	b111      	cbz	r1, 8008d92 <_reclaim_reent+0x72>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 f82f 	bl	8008df0 <_free_r>
 8008d92:	69a3      	ldr	r3, [r4, #24]
 8008d94:	b1e3      	cbz	r3, 8008dd0 <_reclaim_reent+0xb0>
 8008d96:	4620      	mov	r0, r4
 8008d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d9a:	4798      	blx	r3
 8008d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d9e:	b1b9      	cbz	r1, 8008dd0 <_reclaim_reent+0xb0>
 8008da0:	4620      	mov	r0, r4
 8008da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008da6:	f7ff bfad 	b.w	8008d04 <cleanup_glue>
 8008daa:	5949      	ldr	r1, [r1, r5]
 8008dac:	b941      	cbnz	r1, 8008dc0 <_reclaim_reent+0xa0>
 8008dae:	3504      	adds	r5, #4
 8008db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db2:	2d80      	cmp	r5, #128	; 0x80
 8008db4:	68d9      	ldr	r1, [r3, #12]
 8008db6:	d1f8      	bne.n	8008daa <_reclaim_reent+0x8a>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f819 	bl	8008df0 <_free_r>
 8008dbe:	e7ba      	b.n	8008d36 <_reclaim_reent+0x16>
 8008dc0:	680e      	ldr	r6, [r1, #0]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f814 	bl	8008df0 <_free_r>
 8008dc8:	4631      	mov	r1, r6
 8008dca:	e7ef      	b.n	8008dac <_reclaim_reent+0x8c>
 8008dcc:	2500      	movs	r5, #0
 8008dce:	e7ef      	b.n	8008db0 <_reclaim_reent+0x90>
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000028 	.word	0x20000028

08008dd8 <__malloc_lock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__malloc_lock+0x8>)
 8008dda:	f7ff bf7b 	b.w	8008cd4 <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	200020d8 	.word	0x200020d8

08008de4 <__malloc_unlock>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__malloc_unlock+0x8>)
 8008de6:	f7ff bf76 	b.w	8008cd6 <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	200020d8 	.word	0x200020d8

08008df0 <_free_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4605      	mov	r5, r0
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d040      	beq.n	8008e7a <_free_r+0x8a>
 8008df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfc:	1f0c      	subs	r4, r1, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfb8      	it	lt
 8008e02:	18e4      	addlt	r4, r4, r3
 8008e04:	f7ff ffe8 	bl	8008dd8 <__malloc_lock>
 8008e08:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <_free_r+0x8c>)
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	b933      	cbnz	r3, 8008e1c <_free_r+0x2c>
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6014      	str	r4, [r2, #0]
 8008e12:	4628      	mov	r0, r5
 8008e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e18:	f7ff bfe4 	b.w	8008de4 <__malloc_unlock>
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d908      	bls.n	8008e32 <_free_r+0x42>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	1821      	adds	r1, r4, r0
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf01      	itttt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	1809      	addeq	r1, r1, r0
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	e7ed      	b.n	8008e0e <_free_r+0x1e>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x4c>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x42>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1850      	adds	r0, r2, r1
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x6c>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	4401      	add	r1, r0
 8008e48:	1850      	adds	r0, r2, r1
 8008e4a:	4283      	cmp	r3, r0
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1e0      	bne.n	8008e12 <_free_r+0x22>
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4401      	add	r1, r0
 8008e56:	6011      	str	r1, [r2, #0]
 8008e58:	6053      	str	r3, [r2, #4]
 8008e5a:	e7da      	b.n	8008e12 <_free_r+0x22>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x74>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	e7d6      	b.n	8008e12 <_free_r+0x22>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	1821      	adds	r1, r4, r0
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf01      	itttt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	1809      	addeq	r1, r1, r0
 8008e72:	6021      	streq	r1, [r4, #0]
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	6054      	str	r4, [r2, #4]
 8008e78:	e7cb      	b.n	8008e12 <_free_r+0x22>
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	200020dc 	.word	0x200020dc

08008e80 <_init>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr

08008e8c <_fini>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr
